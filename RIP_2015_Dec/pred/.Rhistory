x[-c(1,2,3)] # drop first 3
# x[-1:3] # shorthand. R sees as -1 to 3
x[-(1:3)] # needs parentheses
## ------------------------------------------------------------------------
x
x > 2
x[ x > 2 ]
## ------------------------------------------------------------------------
x[ x > 2 & x < 5 ]
x[ x > 5 | x == 2 ]
## ------------------------------------------------------------------------
which(x > 5 | x == 2) # returns index
x[ which(x > 5 | x == 2) ]
x[ x > 5 | x == 2 ]
## ------------------------------------------------------------------------
set.seed(2016) # reproducbility
df = data.frame(x = c(1, 2, 4, 10, 10),
x2 = rpois(5, 10),
y = rnorm(5),
z = rpois(5, 6)
)
## ------------------------------------------------------------------------
colnames(df) = c("x", "X", "y", "z")
head(df)
colnames(df) = c("x", "x2", "y", "z") #reset
df
cn =colnames(df)
c("z", cn[ cn!="z"])
c("z", colnames(df)[ colnames(df)!="z"])
c("z", cn[ cn!="z"])
select(df, everything(), x)
select(df, everything(), y)
?select
select(df, -matches("x"))
select(df, -matches("x"), matches('x'))
select(df, -one_of("x"), one_of('x'))
help("select")
help("filter")
?filter
library(dplyr)
?filter
?select
## ---- echo = FALSE-------------------------------------------------------
library(knitr)
opts_chunk$set(comment = "")
## ------------------------------------------------------------------------
x = c(1, 4, 2, 8, 10)
x[2]
## ------------------------------------------------------------------------
x = c(1, 2, 4, 8, 10)
x[5]
x[c(2,5)]
## ----negativeIndex-------------------------------------------------------
x[-2] # all but the second
## ----negativeIndex2------------------------------------------------------
x[-c(1,2,3)] # drop first 3
# x[-1:3] # shorthand. R sees as -1 to 3
x[-(1:3)] # needs parentheses
## ------------------------------------------------------------------------
x
x > 2
x[ x > 2 ]
## ------------------------------------------------------------------------
x[ x > 2 & x < 5 ]
x[ x > 5 | x == 2 ]
## ------------------------------------------------------------------------
which(x > 5 | x == 2) # returns index
x[ which(x > 5 | x == 2) ]
x[ x > 5 | x == 2 ]
## ------------------------------------------------------------------------
set.seed(2016) # reproducbility
df = data.frame(x = c(1, 2, 4, 10, 10),
x2 = rpois(5, 10),
y = rnorm(5),
z = rpois(5, 6)
)
## ------------------------------------------------------------------------
colnames(df) = c("x", "X", "y", "z")
head(df)
colnames(df) = c("x", "x2", "y", "z") #reset
df
df[ order(df$y),]
arrange(df, x
)
arrange(df, x, z)
)
arrange(df, x)
arrange(df, x, z)
arrange(df, desc(x))
arrange(df, desc(x), z)
filter(df, x == 1)
filter(df, x != 1)
?sample_frac()
Inf . 2
Inf > 2
NaN > 2
mystr = c("Hey", "", "ho", "let's", "go")
is.na(mystr)
mystr[ mystr == ""] = NA
is.na(mystr)
mystr
factor(mystr)
NA & TRUE
NA & FALSE
NA | TRUE
NA & TRUE
?table
tab <- table(c(0, 1, 2, 3, 2, 3, 3, 2,2, 3),
c(0, 1, 2, 3, 2, 3, 3, 4, 4, 3),
useNA = "always")
tab
tab <- table(x = c(0, 1, 2, 3, 2, 3, 3, 2,2, 3),
y = c(0, 1, 2, 3, 2, 3, 3, 4, 4, 3),
useNA = "always")
tab
x = c(0, 1, 2, 3, 2, 3, 3, 2,2, 3);
y = c(0, 1, 2, 3, 2, 3, 3, 4, 4, 3)
x
y
table(x, y)
table(x)
table(y)
table(x, y)
prop.table(table(x, y), 1)
prop.table(table(x, y), 2)
prop.table(table(x))
library(car, quietly = TRUE)
x = rep(c("Male", "M", "m", "f", "Female", "female" ),
each = 3)
x
unique(x)
table(x)
sort(table(x))
sample(x)
sample(x, , size = 10replace = FALSE)
sample(x, , size = 10,replace = FALSE)
table(sample(x, , size = 10,replace = FALS)E)
table(sample(x, , size = 10,replace = FALSE))
tab  = table(sample(x, , size = 10,replace = FALSE))
sort(tab)
sort(tab, decreasing = TRUE)
tab[tab > 1]
duplicated(x)
x
table(x)
tab = table(x)
tab  = table(sample(x, , size = 10,replace = FALSE))
tab
tab[ tab > 1]
names(tab[ tab > 1])
x = c("hey", 'ho')
x
x = c("hey", "Let's go")
paste("Visit", 1:5)
paste0("Visit", 1:5)
strsplit("I.like.strings", ".")
strsplit("I.like.strings", ".", fixed = TRUE)
?str_detect
library(stringr)
?str_detect
?str_split
?str_extract
?modifiers
cbind(rep("Monday", 3), c("orangeAlightings", "orangeAverage", "orangeBoardings"))
cbind(rep("Monday", 3), rep("orange", 3), Average = rnorm(3), Alightings = rnorm(3), Boardings = rnorm(3))
data.frame(rep("Monday", 3), rep("orange", 3), Average = rnorm(3), Alightings = rnorm(3), Boardings = rnorm(3))
cbind(rep("Monday", 3), c("orangeAlightings", "orangeAverage", "orangeBoardings"))
library(lubridate)
mdy(c("01-06-2016", "01-06/2016", "01/06/2016"))
?as.Date
mdy(c("01-06-2016", "01-06/2016", "01/06/2016"))
dmy(c("01-06-2016", "01-06/2016", "01/06/2016"))
mydays = mdy(c("01-06-2016", "01-06/2016", "01/06/2016"))
day(mydays)
month(mydays)
year(mydays)
?year
?month
mydays - 1
?period
mydays - period(1, "day")
?difftime
mydays = mdy(c("01-06-2016", "01-06/2016", "01/06/2016", "01-08-2016", "01-01-2016"))
mydays
?difftime
difftime(mydays, mydays[1])
difftime(mydays, mydays[1], units = "days")
dt = difftime(mydays, mydays[1], units = "days")
class(dt)
as.numeric(dt)
mydays
cbind(mydays, 0:length(mydays))
cbind(mydays, 0:length(mydays)-1)
cbind(mydays, 0:(length(mydays)-1))
data.frame(mydays, 0:(length(mydays)-1))
data.frame(mydays, days_from_baseline = 0:(length(mydays)-1))
mat = matrix(c("0", "No Stroke Symptoms",
"1-4", "Minor Stroke",
"5-15", "Moderate Stroke",
"16-20", "Moderate to Severe Stroke",
"21-42", "Severe Stroke"), byrow = TRUE, ncol = 5)
colnames(mat) = c("NIHSS Score", "Stroke Severity")
mat
mat = matrix(c("0", "No Stroke Symptoms",
"1-4", "Minor Stroke",
"5-15", "Moderate Stroke",
"16-20", "Moderate to Severe Stroke",
"21-42", "Severe Stroke"), byrow = TRUE, ncol = 2)
colnames(mat) = c("NIHSS Score", "Stroke Severity")
mat
pander(mat)
library(pander)
pander(mat)
mat = data.frame(mat, stringsAsFactors = FALSE)
pander(mat)
source('~/.active-rstudio-document', echo=TRUE)
table(demog$Clot_Location_RC)
source('~/.active-rstudio-document', echo=TRUE)
library(tableone)
library(stargazer)
library(pander)
alldemog = read.csv("All_180_FollowUp_wDemographics.csv", as.is = TRUE)
alldemog = alldemog[, c("patientName", "Clot_Location_RC")]
alldemog$Clot_Location_RC = revalue(alldemog$Clot_Location_RC,
c("Globus Pallidus" = "Globus Palidus"))
source('~/.active-rstudio-document', echo=TRUE)
library(tableone)
library(stargazer)
library(pander)
alldemog = read.csv("All_180_FollowUp_wDemographics.csv", as.is = TRUE)
alldemog = alldemog[, c("patientName", "Clot_Location_RC")]
alldemog$Clot_Location_RC = revalue(
alldemog$Clot_Location_RC,
c("Globus Palidus" = "Globus Pallidus"))
table(alldemog$Clot_Location_RC)
source('~/.active-rstudio-document', echo=TRUE)
?arrange
library(dplyr)
?arrange
source('~/.active-rstudio-document', echo=TRUE)
load("Population_Table.Rda")
pop.tab = head(col.xtabs[["EVE_1"]], n)
pop.tab = pop.tab[, c("Area", "EVE_1")]
col.xtabs
col.dfs
names(col.dfs)
names(col.dfs$EVE_1)
n = 10
load("Population_Table.Rda")
pop.tab = col.dfs$EVE_1
n = 10
load("Population_Table.Rda")
pop.tab = head(col.dfs$EVE_1, n)
pop.tab
pop.tab = pop.tab[, c("Area", "EVE_1")]
pop.tab$EVE_1 = sprintf("%02.1f", pop.tab$EVE_1)
head(pop.tab)
names(pop.tab) = c("Area", "Population Prevalence")
pop.tab$Area = revalue(pop.tab$Area, c("Ventricles" = "Background"))
n = 10
load("Population_Table.Rda")
pop.tab = head(col.dfs$EVE_1, n)
pop.tab = pop.tab[, c("Area", "EVE_1")]
pop.tab$EVE_1 = sprintf("%02.1f", pop.tab$EVE_1)
names(pop.tab) = c("Area", "Population Prevalence")
pop.tab$Area = revalue(pop.tab$Area, c("Ventricles" = "Background"))
df = pop.tab
# df = merge(pop.tab, nihss.tab, sort=FALSE, all = TRUE)
# df = merge(df, gcs.tab, sort=FALSE, all = TRUE)
proper = function(x){
substring(x, 1, 1) <- toupper(substring(x, 1, 1))
substring(x, 2) <- tolower(substring(x, 2))
x
}
df$Area = proper(df$Area)
df$Area = revalue(df$Area, c("Background" = "CSF (ventricular & subarachnoid spaces)"))
df$Area = revalue(df$Area, c("Csf" = "CSF (ventricular & subarachnoid spaces)"))
df$Area = gsub("_", " ", df$Area)
df$Area = gsub(" wm( |)", " WM ", df$Area)
df$Area = str_trim(df$Area)
df = df[order(as.numeric(df$"Population Prevalence"),
#              as.numeric(df[, "NIHSS HPR"]),
#              as.numeric(df[, "GCS HPR"]),
decreasing=TRUE),]
df[sapply(df, is.na)] = ""
rownames(df) = NULL
df
datatable(df)
df = read.table("Subject_Table.txt")
df
df$Area = proper(df$Area)
df = read.table("Subject_Table.txt", stringsAsFactors = FALSE)
proper = function(x){
substring(x, 1, 1) <- toupper(substring(x, 1, 1))
substring(x, 2) <- tolower(substring(x, 2))
x
}
df$Area = proper(df$Area)
df
source('~/.active-rstudio-document', echo=TRUE)
library(rmarkdown)
render("Job_Talk.Rmd")
tb1
demog
demog$patientName
demog$patientName == 100362
demog[demog$patientName == 100362,]
demog$Clot_Location_RC[demog$patientName == 100362]
library(tableone)
library(stargazer)
library(pander)
library(plyr)
alldemog = read.csv("All_180_FollowUp_wDemographics.csv", as.is = TRUE)
alldemog = alldemog[, c("patientName", "Clot_Location_RC")]
alldemog$Clot_Location_RC = plyr::revalue(
alldemog$Clot_Location_RC,
c("Globus Palidus" = "Globus Pallidus"))
n.ids = length(unique(fdf$id))
demog = fdf$id
demog = all.alldat[ all.alldat$patientName %in% demog, ]
demog$Clot_Location_RC = NULL
demog = merge(demog, alldemog, all.x = TRUE )
stopifnot(nrow(demog) == n.ids)
demog$Diagnostic_ICH_Volume =demog$ICH_Dx_10 * 10
demog$Diagnostic_IVH_Volume =demog$IVH_Dx_10 * 10
tt = sort(table(demog$Clot_Location_RC), decreasing = TRUE)
nclot = names(tt)[tt > 0]
demog$Clot_Location_RC = factor(demog$Clot_Location_RC, levels = nclot)
vars = c("Age", "Gender", "Clot_Location_RC",
"Diagnostic_ICH_Volume")
catvars = c("Gender", "Clot_Location_RC")
tb1 = CreateTableOne(vars = vars, factorVars = catvars,
data = demog)
tb1 = print(tb1, contDigits = 1)
gen = grepl("Gender", rownames(tb1))
rownames(tb1)[ gen ] = "Male: N (%)"
tb1[gen,1] = gsub("\\((.*)\\)", "(\\1%)", tb1[gen,1,drop=FALSE])
rownames(tb1) = gsub("_", " ", rownames(tb1))
rownames(tb1) = gsub(" \\(mean", ": Mean", rownames(tb1))
rownames(tb1) = gsub("(sd))", "(SD)", rownames(tb1), fixed=TRUE)
rownames(tb1) = gsub("Volume", "Volume in mL", rownames(tb1), fixed=TRUE)
rownames(tb1) = gsub("Age", "Age in Years", rownames(tb1), fixed=TRUE)
rownames(tb1) = gsub("Clot_Location_RC", "ICH Location", rownames(tb1), fixed=TRUE)
tb1 = tb1[rownames(tb1) != "n", , drop=FALSE]
# tb1 = pander.return(tb1)
rm(list=  ls())
library(fslr)
library(dplyr)
setwd("~/Dropbox/CTR/DHanley/CT_Registration/RIP_SlideDeck/RIP_2015_Dec/pred/")
img = readnii("100-362_20100126_1926_CT_2_CT_ROUTINE_SS_0.01_SyN.nii.gz")
roi = readnii("100-362_20100126_1926_CT_2_CT_ROUTINE_SS_0.01_SyN_ROI.nii.gz")
atlas = readnii("JHU_MNI_SS_WMPM_Type-I_to_Rorden_brain.nii.gz")
# aimg = readnii("betsct1_unsmooth.nii.gz")
ortho2(atlas)
ortho2(atlas, col = hotmetal(10))
rainbow(100)
ortho2(atlas, col = rainbow(100))
rm(list=  ls())
library(fslr)
library(dplyr)
setwd("~/Dropbox/CTR/DHanley/CT_Registration/RIP_SlideDeck/RIP_2015_Dec/pred/")
img = readnii("100-362_20100126_1926_CT_2_CT_ROUTINE_SS_0.01_SyN.nii.gz")
roi = readnii("100-362_20100126_1926_CT_2_CT_ROUTINE_SS_0.01_SyN_ROI.nii.gz")
atlas = readnii("JHU_MNI_SS_WMPM_Type-I_to_Rorden_brain.nii.gz")
# aimg = readnii("betsct1_unsmooth.nii.gz")
xx = read.table("JHU_MNI_SS_WMPM_Type-I_SlicerLUT.txt", stringsAsFactors = FALSE)
xx = xx[, 1:2]
colnames(xx) = c("index", "Area")
xx = rbind(xx, c(-99, "Outside Brain Mask"))
xx$index = as.numeric(xx$index)
jhut1.df = xx
ind = atlas[which(roi > 0.5)]
df = as.data.frame(table(index = ind))
df = merge(df, jhut1.df, all.x = TRUE)
stopifnot(!grepl("left", df$Area))
df$Area = gsub("_(left|right)", "",
df$Area)
df$Area = gsub("_", " ", df$Area)
# coldf = group_by(df, nolr_area) %>%
#     summarise(sum_area = sum(Freq))
df$Prevalence = round(df$Freq/sum(df$Freq) * 100, 1)
################
# Combining left and right
################
n = 5
xdf = arrange(df, desc(Prevalence)) %>%
select(Area, Prevalence)  %>%
head(n = n)
write.table(xdf, file = "../Subject_Table.txt")
a = atlas
a[ a == 0] = NA
ortho2(atlas, col = rainbow(100))
ortho2(a, col = rainbow(100))
a
ortho2(img)
system.file(package = "ichseg")
system(sprintf("open %s", system.file(package = "ichseg")))
template = system.file("scct_unsmooth_SS_0.01.nii.gz", package = "ichseg")
tfile = system.file("scct_unsmooth_SS_0.01.nii.gz", package = "ichseg")
template = readnii(tfile)
a = atlas
a[ a == 0] = NA
a = atlas
a[ a == 0] = NA
# ortho2(a, col = rainbow(100))
ortho2(template, a, col.y = rainbow(100))
rm(list=ls())
library(fslr)
library(scales)
setwd("~/Dropbox/RegLib_C26_MoriAtlas")
##########################
# Use the MNI 152 T1 brain image for registration
#########################
rorden.file = "betsct1_unsmooth.nii.gz"
rorden_brain = readNIfTI(rorden.file, reorient=FALSE)
eve = readNIfTI(
"JHU_MNI_SS_T1_brain.nii.gz",
reorient=FALSE)
ortho2(rorden_brain,
eve > 0, col.y=alpha("red", 0.25),
text = "Rorden T1 overlaid\nwith Eve Brain Mask")
eve = readnii("JHU_MNI_SS_T1_brain_to_Rorden_brain.nii.gz")
rorden = readnii("betsct1_unsmooth.nii.gz")
ortho2(eve, rorden)
source('~/Dropbox/CTR/DHanley/CT_Registration/RIP_SlideDeck/RIP_2015_Dec/pred/Make_Subject_Table.R')
a = atlas
a[ a == 0] = NA
source('~/Dropbox/CTR/DHanley/CT_Registration/RIP_SlideDeck/RIP_2015_Dec/pred/Make_Subject_Table.R')
a = atlas
a[ a == 0] = NA
# ortho2(a, col = rainbow(100))
ortho2(template, a, col.y = rainbow(100))
template = readnii("scct_unsmooth_SS_0.01.nii.gz")
template
source('~/Dropbox/CTR/DHanley/CT_Registration/RIP_SlideDeck/RIP_2015_Dec/pred/Make_Subject_Table.R')
t2 = window_img(template, window = c(0, 100))
t2[ roi == 1] = 1000
a = atlas
a[ a == 0] = NA
ortho2(t2, a, col.y = rainbow(100))
double_ortho(t2, a, col.y = rainbow(100))
t2 = window_img(template, window = c(0, 100))
t2[ roi == 1] = 200
double_ortho(t2, a, col.y = rainbow(100))
ortho2(template, a, col.y = rainbow(100))
double_ortho(t2, a, col.y = rainbow(100), xyz = xyz(roi))
template = readN("scct_unsmooth_SS_0.01.nii.gz")
template = readNIfTI("scct_unsmooth_SS_0.01.nii.gz")
img = readNIfTI("100-362_20100126_1926_CT_2_CT_ROUTINE_SS_0.01_SyN.nii.gz")
rm(list=  ls())
library(fslr)
library(dplyr)
setwd("~/Dropbox/CTR/DHanley/CT_Registration/RIP_SlideDeck/RIP_2015_Dec/pred/")
template = readNIfTI("scct_unsmooth_SS_0.01.nii.gz")
img = readNIfTI("100-362_20100126_1926_CT_2_CT_ROUTINE_SS_0.01_SyN.nii.gz")
roi = readNIfTI("100-362_20100126_1926_CT_2_CT_ROUTINE_SS_0.01_SyN_ROI.nii.gz")
atlas = readNIfTI("JHU_MNI_SS_WMPM_Type-I_to_Rorden_brain.nii.gz")
# aimg = readnii("betsct1_unsmooth.nii.gz")
xx = read.table("JHU_MNI_SS_WMPM_Type-I_SlicerLUT.txt", stringsAsFactors = FALSE)
xx = xx[, 1:2]
colnames(xx) = c("index", "Area")
xx = rbind(xx, c(-99, "Outside Brain Mask"))
xx$index = as.numeric(xx$index)
jhut1.df = xx
ind = atlas[which(roi > 0.5)]
df = as.data.frame(table(index = ind))
df = merge(df, jhut1.df, all.x = TRUE)
stopifnot(!grepl("left", df$Area))
df$Area = gsub("_(left|right)", "",
df$Area)
df$Area = gsub("_", " ", df$Area)
# coldf = group_by(df, nolr_area) %>%
#     summarise(sum_area = sum(Freq))
df$Prevalence = round(df$Freq/sum(df$Freq) * 100, 1)
################
# Combining left and right
################
n = 5
xdf = arrange(df, desc(Prevalence)) %>%
select(Area, Prevalence)  %>%
head(n = n)
write.table(xdf, file = "../Subject_Table.txt")
t2 = window_img(template, window = c(0, 100))
t2[ roi == 1] = 200
a = atlas
a[ a == 0] = NA
# ortho2(a, col = rainbow(100))
# ortho2(template, a, col.y = rainbow(100))
double_ortho(t2, a, col.y = rainbow(100), xyz = xyz(roi))
dd = dropEmptyImageDimensions(a > 0, other.imgs = list(t2 = t2, a = a)
dd = dropEmptyImageDimensions(a > 0, other.imgs = list(t2 = t2, a = a))
t2 = window_img(template, window = c(0, 100))
t2[ roi == 1] = 200
a = atlas
a[ a == 0] = NA
dd = dropEmptyImageDimensions(a > 0, other.imgs = list(t2 = t2, a = a))
t2 = dd$other.imgs$t2
a = dd$other.imgs$a
double_ortho(t2, a, col.y = rainbow(100), xyz = xyz(roi))
t2 = window_img(template, window = c(0, 100))
t2[ roi == 1] = 200
a = atlas
a[ a == 0] = NA
dd = dropEmptyImageDimensions(a > 0, other.imgs = list(t2 = t2, a = a, roi = roi))
t2 = dd$other.imgs$t2
a = dd$other.imgs$a
xroi = dd$outimg$roi
xroi = dd$other.imgs$roi
double_ortho(t2, a, col.y = rainbow(100), xyz = xyz(xroi), orientation = FALSE)
?ortho2
double_ortho(t2, a, col.y = rainbow(100), xyz = xyz(xroi), add.orient = FALSE)
source('~/Dropbox/CTR/DHanley/CT_Registration/RIP_SlideDeck/RIP_2015_Dec/pred/Make_Subject_Table.R')
