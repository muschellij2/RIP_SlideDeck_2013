dim(df)
nrow(df)
cbind(df, x2)
df
select(df, -x)
df
select(df, -x)
df = select(df, -x)
select(df, -c("y", "z"))
-c("y", "z")
select(df, -y, yz
select(df, -y, -z)
select(df, -c(y, z))
select(df, c(-y, -z))
df[, -c("y", "z")]
df[, -c(y, z)]
## ---- echo = FALSE-------------------------------------------------------
library(knitr)
opts_chunk$set(comment = "")
## ------------------------------------------------------------------------
x = c(1, 4, 2, 8, 10)
x[2]
## ------------------------------------------------------------------------
x = c(1, 2, 4, 8, 10)
x[5]
x[c(2,5)]
## ----negativeIndex-------------------------------------------------------
x[-2] # all but the second
## ----negativeIndex2------------------------------------------------------
x[-c(1,2,3)] # drop first 3
# x[-1:3] # shorthand. R sees as -1 to 3
x[-(1:3)] # needs parentheses
## ------------------------------------------------------------------------
x
x > 2
x[ x > 2 ]
## ------------------------------------------------------------------------
x[ x > 2 & x < 5 ]
x[ x > 5 | x == 2 ]
## ------------------------------------------------------------------------
which(x > 5 | x == 2) # returns index
x[ which(x > 5 | x == 2) ]
x[ x > 5 | x == 2 ]
## ------------------------------------------------------------------------
set.seed(2016) # reproducbility
df = data.frame(x = c(1, 2, 4, 10, 10),
x2 = rpois(5, 10),
y = rnorm(5),
z = rpois(5, 6)
)
## ------------------------------------------------------------------------
colnames(df) = c("x", "X", "y", "z")
head(df)
colnames(df) = c("x", "x2", "y", "z") #reset
df
cn =colnames(df)
c("z", cn[ cn!="z"])
c("z", colnames(df)[ colnames(df)!="z"])
c("z", cn[ cn!="z"])
select(df, everything(), x)
select(df, everything(), y)
?select
select(df, -matches("x"))
select(df, -matches("x"), matches('x'))
select(df, -one_of("x"), one_of('x'))
help("select")
help("filter")
?filter
library(dplyr)
?filter
?select
## ---- echo = FALSE-------------------------------------------------------
library(knitr)
opts_chunk$set(comment = "")
## ------------------------------------------------------------------------
x = c(1, 4, 2, 8, 10)
x[2]
## ------------------------------------------------------------------------
x = c(1, 2, 4, 8, 10)
x[5]
x[c(2,5)]
## ----negativeIndex-------------------------------------------------------
x[-2] # all but the second
## ----negativeIndex2------------------------------------------------------
x[-c(1,2,3)] # drop first 3
# x[-1:3] # shorthand. R sees as -1 to 3
x[-(1:3)] # needs parentheses
## ------------------------------------------------------------------------
x
x > 2
x[ x > 2 ]
## ------------------------------------------------------------------------
x[ x > 2 & x < 5 ]
x[ x > 5 | x == 2 ]
## ------------------------------------------------------------------------
which(x > 5 | x == 2) # returns index
x[ which(x > 5 | x == 2) ]
x[ x > 5 | x == 2 ]
## ------------------------------------------------------------------------
set.seed(2016) # reproducbility
df = data.frame(x = c(1, 2, 4, 10, 10),
x2 = rpois(5, 10),
y = rnorm(5),
z = rpois(5, 6)
)
## ------------------------------------------------------------------------
colnames(df) = c("x", "X", "y", "z")
head(df)
colnames(df) = c("x", "x2", "y", "z") #reset
df
df[ order(df$y),]
arrange(df, x
)
arrange(df, x, z)
)
arrange(df, x)
arrange(df, x, z)
arrange(df, desc(x))
arrange(df, desc(x), z)
filter(df, x == 1)
filter(df, x != 1)
?sample_frac()
Inf . 2
Inf > 2
NaN > 2
mystr = c("Hey", "", "ho", "let's", "go")
is.na(mystr)
mystr[ mystr == ""] = NA
is.na(mystr)
mystr
factor(mystr)
NA & TRUE
NA & FALSE
NA | TRUE
NA & TRUE
?table
tab <- table(c(0, 1, 2, 3, 2, 3, 3, 2,2, 3),
c(0, 1, 2, 3, 2, 3, 3, 4, 4, 3),
useNA = "always")
tab
tab <- table(x = c(0, 1, 2, 3, 2, 3, 3, 2,2, 3),
y = c(0, 1, 2, 3, 2, 3, 3, 4, 4, 3),
useNA = "always")
tab
x = c(0, 1, 2, 3, 2, 3, 3, 2,2, 3);
y = c(0, 1, 2, 3, 2, 3, 3, 4, 4, 3)
x
y
table(x, y)
table(x)
table(y)
table(x, y)
prop.table(table(x, y), 1)
prop.table(table(x, y), 2)
prop.table(table(x))
library(car, quietly = TRUE)
x = rep(c("Male", "M", "m", "f", "Female", "female" ),
each = 3)
x
unique(x)
table(x)
sort(table(x))
sample(x)
sample(x, , size = 10replace = FALSE)
sample(x, , size = 10,replace = FALSE)
table(sample(x, , size = 10,replace = FALS)E)
table(sample(x, , size = 10,replace = FALSE))
tab  = table(sample(x, , size = 10,replace = FALSE))
sort(tab)
sort(tab, decreasing = TRUE)
tab[tab > 1]
duplicated(x)
x
table(x)
tab = table(x)
tab  = table(sample(x, , size = 10,replace = FALSE))
tab
tab[ tab > 1]
names(tab[ tab > 1])
x = c("hey", 'ho')
x
x = c("hey", "Let's go")
paste("Visit", 1:5)
paste0("Visit", 1:5)
strsplit("I.like.strings", ".")
strsplit("I.like.strings", ".", fixed = TRUE)
?str_detect
library(stringr)
?str_detect
?str_split
?str_extract
?modifiers
cbind(rep("Monday", 3), c("orangeAlightings", "orangeAverage", "orangeBoardings"))
cbind(rep("Monday", 3), rep("orange", 3), Average = rnorm(3), Alightings = rnorm(3), Boardings = rnorm(3))
data.frame(rep("Monday", 3), rep("orange", 3), Average = rnorm(3), Alightings = rnorm(3), Boardings = rnorm(3))
cbind(rep("Monday", 3), c("orangeAlightings", "orangeAverage", "orangeBoardings"))
library(lubridate)
mdy(c("01-06-2016", "01-06/2016", "01/06/2016"))
?as.Date
mdy(c("01-06-2016", "01-06/2016", "01/06/2016"))
dmy(c("01-06-2016", "01-06/2016", "01/06/2016"))
mydays = mdy(c("01-06-2016", "01-06/2016", "01/06/2016"))
day(mydays)
month(mydays)
year(mydays)
?year
?month
mydays - 1
?period
mydays - period(1, "day")
?difftime
mydays = mdy(c("01-06-2016", "01-06/2016", "01/06/2016", "01-08-2016", "01-01-2016"))
mydays
?difftime
difftime(mydays, mydays[1])
difftime(mydays, mydays[1], units = "days")
dt = difftime(mydays, mydays[1], units = "days")
class(dt)
as.numeric(dt)
mydays
cbind(mydays, 0:length(mydays))
cbind(mydays, 0:length(mydays)-1)
cbind(mydays, 0:(length(mydays)-1))
data.frame(mydays, 0:(length(mydays)-1))
data.frame(mydays, days_from_baseline = 0:(length(mydays)-1))
mat = matrix(c("0", "No Stroke Symptoms",
"1-4", "Minor Stroke",
"5-15", "Moderate Stroke",
"16-20", "Moderate to Severe Stroke",
"21-42", "Severe Stroke"), byrow = TRUE, ncol = 5)
colnames(mat) = c("NIHSS Score", "Stroke Severity")
mat
mat = matrix(c("0", "No Stroke Symptoms",
"1-4", "Minor Stroke",
"5-15", "Moderate Stroke",
"16-20", "Moderate to Severe Stroke",
"21-42", "Severe Stroke"), byrow = TRUE, ncol = 2)
colnames(mat) = c("NIHSS Score", "Stroke Severity")
mat
pander(mat)
library(pander)
pander(mat)
mat = data.frame(mat, stringsAsFactors = FALSE)
pander(mat)
source('~/.active-rstudio-document', echo=TRUE)
table(demog$Clot_Location_RC)
source('~/.active-rstudio-document', echo=TRUE)
library(tableone)
library(stargazer)
library(pander)
alldemog = read.csv("All_180_FollowUp_wDemographics.csv", as.is = TRUE)
alldemog = alldemog[, c("patientName", "Clot_Location_RC")]
alldemog$Clot_Location_RC = revalue(alldemog$Clot_Location_RC,
c("Globus Pallidus" = "Globus Palidus"))
source('~/.active-rstudio-document', echo=TRUE)
library(tableone)
library(stargazer)
library(pander)
alldemog = read.csv("All_180_FollowUp_wDemographics.csv", as.is = TRUE)
alldemog = alldemog[, c("patientName", "Clot_Location_RC")]
alldemog$Clot_Location_RC = revalue(
alldemog$Clot_Location_RC,
c("Globus Palidus" = "Globus Pallidus"))
table(alldemog$Clot_Location_RC)
source('~/.active-rstudio-document', echo=TRUE)
?arrange
library(dplyr)
?arrange
source('~/.active-rstudio-document', echo=TRUE)
load("Population_Table.Rda")
pop.tab = head(col.xtabs[["EVE_1"]], n)
pop.tab = pop.tab[, c("Area", "EVE_1")]
col.xtabs
col.dfs
names(col.dfs)
names(col.dfs$EVE_1)
n = 10
load("Population_Table.Rda")
pop.tab = col.dfs$EVE_1
n = 10
load("Population_Table.Rda")
pop.tab = head(col.dfs$EVE_1, n)
pop.tab
pop.tab = pop.tab[, c("Area", "EVE_1")]
pop.tab$EVE_1 = sprintf("%02.1f", pop.tab$EVE_1)
head(pop.tab)
names(pop.tab) = c("Area", "Population Prevalence")
pop.tab$Area = revalue(pop.tab$Area, c("Ventricles" = "Background"))
n = 10
load("Population_Table.Rda")
pop.tab = head(col.dfs$EVE_1, n)
pop.tab = pop.tab[, c("Area", "EVE_1")]
pop.tab$EVE_1 = sprintf("%02.1f", pop.tab$EVE_1)
names(pop.tab) = c("Area", "Population Prevalence")
pop.tab$Area = revalue(pop.tab$Area, c("Ventricles" = "Background"))
df = pop.tab
# df = merge(pop.tab, nihss.tab, sort=FALSE, all = TRUE)
# df = merge(df, gcs.tab, sort=FALSE, all = TRUE)
proper = function(x){
substring(x, 1, 1) <- toupper(substring(x, 1, 1))
substring(x, 2) <- tolower(substring(x, 2))
x
}
df$Area = proper(df$Area)
df$Area = revalue(df$Area, c("Background" = "CSF (ventricular & subarachnoid spaces)"))
df$Area = revalue(df$Area, c("Csf" = "CSF (ventricular & subarachnoid spaces)"))
df$Area = gsub("_", " ", df$Area)
df$Area = gsub(" wm( |)", " WM ", df$Area)
df$Area = str_trim(df$Area)
df = df[order(as.numeric(df$"Population Prevalence"),
#              as.numeric(df[, "NIHSS HPR"]),
#              as.numeric(df[, "GCS HPR"]),
decreasing=TRUE),]
df[sapply(df, is.na)] = ""
rownames(df) = NULL
df
datatable(df)
df = read.table("Subject_Table.txt")
df
df$Area = proper(df$Area)
df = read.table("Subject_Table.txt", stringsAsFactors = FALSE)
proper = function(x){
substring(x, 1, 1) <- toupper(substring(x, 1, 1))
substring(x, 2) <- tolower(substring(x, 2))
x
}
df$Area = proper(df$Area)
df
source('~/.active-rstudio-document', echo=TRUE)
library(rmarkdown)
render("Job_Talk.Rmd")
tb1
demog
demog$patientName
demog$patientName == 100362
demog[demog$patientName == 100362,]
demog$Clot_Location_RC[demog$patientName == 100362]
rm(list=  ls())
library(fslr)
library(dplyr)
setwd("~/Dropbox/CTR/DHanley/CT_Registration/RIP_SlideDeck/RIP_2015_Dec/pred/")
template = readNIfTI("scct_unsmooth_SS_0.01.nii.gz")
img = readNIfTI("100-362_20100126_1926_CT_2_CT_ROUTINE_SS_0.01_SyN.nii.gz")
roi = readNIfTI("100-362_20100126_1926_CT_2_CT_ROUTINE_SS_0.01_SyN_ROI.nii.gz")
atlas = readNIfTI("JHU_MNI_SS_WMPM_Type-I_to_Rorden_brain.nii.gz")
# aimg = readnii("betsct1_unsmooth.nii.gz")
xx = read.table("JHU_MNI_SS_WMPM_Type-I_SlicerLUT.txt", stringsAsFactors = FALSE)
xx = xx[, 1:2]
colnames(xx) = c("index", "Area")
xx = rbind(xx, c(-99, "Outside Brain Mask"))
xx$index = as.numeric(xx$index)
jhut1.df = xx
ind = atlas[which(roi > 0.5)]
df = as.data.frame(table(index = ind))
df = merge(df, jhut1.df, all.x = TRUE)
stopifnot(!grepl("left", df$Area))
df$Area = gsub("_(left|right)", "",
df$Area)
df$Area = gsub("_", " ", df$Area)
# coldf = group_by(df, nolr_area) %>%
#     summarise(sum_area = sum(Freq))
df$Engagement = round(df$Freq/sum(df$Freq) * 100, 1)
################
# Combining left and right
################
head(df)
n = 5
xdf = arrange(df, desc(Engagement)) %>%
select(Area, Engagement)  %>%
head(n = n)
xdf
df
rm(list=  ls())
library(fslr)
library(dplyr)
setwd("~/Dropbox/CTR/DHanley/CT_Registration/RIP_SlideDeck/RIP_2015_Dec/pred/")
template = readNIfTI("scct_unsmooth_SS_0.01.nii.gz")
img = readNIfTI("100-362_20100126_1926_CT_2_CT_ROUTINE_SS_0.01_SyN.nii.gz")
roi = readNIfTI("100-362_20100126_1926_CT_2_CT_ROUTINE_SS_0.01_SyN_ROI.nii.gz")
atlas = readNIfTI("JHU_MNI_SS_WMPM_Type-I_to_Rorden_brain.nii.gz")
# aimg = readnii("betsct1_unsmooth.nii.gz")
xx = read.table("JHU_MNI_SS_WMPM_Type-I_SlicerLUT.txt", stringsAsFactors = FALSE)
xx = xx[, 1:2]
colnames(xx) = c("index", "Area")
xx = rbind(xx, c(-99, "Outside Brain Mask"))
xx$index = as.numeric(xx$index)
jhut1.df = xx
ind = atlas[which(roi > 0.5)]
df = as.data.frame(table(index = ind))
df = merge(df, jhut1.df, all.x = TRUE)
head(df)
atlas
grep("utamen", tolower(jhut1.df$Area)
)
grep("utamen", tolower(jhut1.df$Area))
jhut1.df[grep("utamen", tolower(jhut1.df$Area)),]
inds = jhut1.df[grep("utamen|caudate|globus", tolower(jhut1.df$Area)),]
inds
inds = jhut1.df[grep("utamen|caudate|globus", tolower(jhut1.df$Area)),]
inds$nvoxels = sapply(inds$index, function(x){
sum(atlas == x)
})
head(inds)
ind = atlas[which(roi > 0.5)]
df = as.data.frame(table(index = ind))
head(df)
df
tab = table(c(atlas))
head(tab)
tab = table(c(index = atlas))
tab = as.data.frame(tab)
jhut1.df = merge(jhut1.df, tab, all.x = TRUE)
head(jhut1.df)
tab = table(c(index = atlas))
tab = as.data.frame(tab)
head(tab)
rm(list=  ls())
library(fslr)
library(dplyr)
setwd("~/Dropbox/CTR/DHanley/CT_Registration/RIP_SlideDeck/RIP_2015_Dec/pred/")
template = readNIfTI("scct_unsmooth_SS_0.01.nii.gz")
img = readNIfTI("100-362_20100126_1926_CT_2_CT_ROUTINE_SS_0.01_SyN.nii.gz")
roi = readNIfTI("100-362_20100126_1926_CT_2_CT_ROUTINE_SS_0.01_SyN_ROI.nii.gz")
atlas = readNIfTI("JHU_MNI_SS_WMPM_Type-I_to_Rorden_brain.nii.gz")
# aimg = readnii("betsct1_unsmooth.nii.gz")
xx = read.table("JHU_MNI_SS_WMPM_Type-I_SlicerLUT.txt", stringsAsFactors = FALSE)
xx = xx[, 1:2]
colnames(xx) = c("index", "Area")
xx = rbind(xx, c(-99, "Outside Brain Mask"))
xx$index = as.numeric(xx$index)
jhut1.df = xx
tab = table(c(index = atlas))
tab = as.data.frame(tab)
colnames(tab) = c("index", "n_voxels")
jhut1.df = merge(jhut1.df, tab, all.x = TRUE)
# inds = jhut1.df[grep("utamen|caudate|globus", tolower(jhut1.df$Area)),]
ind = atlas[which(roi > 0.5)]
df = as.data.frame(table(index = ind))
head(df)
head(jhut1.df)
jhut1.df$n_voxels[is.na(jhut1.df$n_voxels)] = 0
ind = atlas[which(roi > 0.5)]
df = as.data.frame(table(index = ind))
head(df
)
rm(list=  ls())
library(fslr)
library(dplyr)
setwd("~/Dropbox/CTR/DHanley/CT_Registration/RIP_SlideDeck/RIP_2015_Dec/pred/")
template = readNIfTI("scct_unsmooth_SS_0.01.nii.gz")
img = readNIfTI("100-362_20100126_1926_CT_2_CT_ROUTINE_SS_0.01_SyN.nii.gz")
roi = readNIfTI("100-362_20100126_1926_CT_2_CT_ROUTINE_SS_0.01_SyN_ROI.nii.gz")
atlas = readNIfTI("JHU_MNI_SS_WMPM_Type-I_to_Rorden_brain.nii.gz")
# aimg = readnii("betsct1_unsmooth.nii.gz")
xx = read.table("JHU_MNI_SS_WMPM_Type-I_SlicerLUT.txt", stringsAsFactors = FALSE)
xx = xx[, 1:2]
colnames(xx) = c("index", "Area")
xx = rbind(xx, c(-99, "Outside Brain Mask"))
xx$index = as.numeric(xx$index)
jhut1.df = xx
tab = table(index = c(atlas))
tab = as.data.frame(tab)
colnames(tab) = c("index", "n_voxels")
jhut1.df = merge(jhut1.df, tab, all.x = TRUE)
jhut1.df$n_voxels[is.na(jhut1.df$n_voxels)] = 0
# inds = jhut1.df[grep("utamen|caudate|globus", tolower(jhut1.df$Area)),]
ind = atlas[which(roi > 0.5)]
df = as.data.frame(table(index = ind))
df = merge(df, jhut1.df, all.x = TRUE)
jhut1.df = merge(jhut1.df, df, all.x = TRUE)
head(jhut1.df)
inds = jhut1.df[grep("utamen|caudate|globus", tolower(jhut1.df$Area)),]
hed(inds)
head(inds)
inds
df
rm(list=  ls())
library(fslr)
library(dplyr)
setwd("~/Dropbox/CTR/DHanley/CT_Registration/RIP_SlideDeck/RIP_2015_Dec/pred/")
template = readNIfTI("scct_unsmooth_SS_0.01.nii.gz")
img = readNIfTI("100-362_20100126_1926_CT_2_CT_ROUTINE_SS_0.01_SyN.nii.gz")
roi = readNIfTI("100-362_20100126_1926_CT_2_CT_ROUTINE_SS_0.01_SyN_ROI.nii.gz")
atlas = readNIfTI("JHU_MNI_SS_WMPM_Type-I_to_Rorden_brain.nii.gz")
# aimg = readnii("betsct1_unsmooth.nii.gz")
xx = read.table("JHU_MNI_SS_WMPM_Type-I_SlicerLUT.txt", stringsAsFactors = FALSE)
xx = xx[, 1:2]
colnames(xx) = c("index", "Area")
xx = rbind(xx, c(-99, "Outside Brain Mask"))
xx$index = as.numeric(xx$index)
jhut1.df = xx
tab = table(index = c(atlas))
tab = as.data.frame(tab)
colnames(tab) = c("index", "n_voxels")
jhut1.df = merge(jhut1.df, tab, all.x = TRUE)
jhut1.df$n_voxels[is.na(jhut1.df$n_voxels)] = 0
ind = atlas[which(roi > 0.5)]
df = as.data.frame(table(index = ind))
df = merge(df, jhut1.df, all.x = TRUE)
###########################
# Do the specific index
###########################
jhut1.df = merge(jhut1.df, df, all.x = TRUE)
# inds = jhut1.df[grep("utamen|caudate|globus",
#                      tolower(jhut1.df$Area)),]
inds = jhut1.df[grep("cingulate_gyrus",
tolower(jhut1.df$Area)),]
inds
inds = jhut1.df[grep("cingulate",
tolower(jhut1.df$Area)),]
inds
df
