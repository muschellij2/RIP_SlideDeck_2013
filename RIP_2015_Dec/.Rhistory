sfunc <- function(x){
x <- gsub("%", "\\%", x, fixed=TRUE)
x <- gsub("ZZZ", "\\;\\;", x, fixed=TRUE)
x <- gsub("<=", "$\\leq$", x, fixed=TRUE)
x <- gsub(">=", "$\\geq$", x, fixed=TRUE)
x <- gsub("<", "$<$", x, fixed=TRUE)
x <- gsub(">", "$>$", x, fixed=TRUE)
}
b.sfunc <- function(x){
x = sfunc(x)
x = paste0("{\\bf ", x, "}")
}
b.sfunc <- function(x){
x = sfunc(x)
x = paste0("{", x, "}")
}
load('Voxel_Info.Rda')
## ----runres_func---------------------------------------------------------
runres = function(){
res = reses$adj.r.squared
makeres = function(res, colname, digits=3, yes=TRUE) {
wc.adj = res[1,"With_Clot"]
cn = c("With_Perc", "nkeep", "pval")
res = res[, cn]
# res = res[1:nrow(res),]
res = rbind(c(wc.adj, rep(NA, ncol(res)-1)), res)
colnames(res) = c(colname, "N_Voxels", "P.value")
res = as.data.frame(res)
res[, colname] = round(res[, colname], digits)
if (yes) res[, colname] = sprintf(paste0("%0", digits+1, ".", digits, "f"), res[, colname])
res[, "P.value"] = sprintf(paste0("%.", 4, "f"), res[, "P.value"])
res[, "P.value"] = gsub("^0", "", res[, "P.value"])
res[, "N_Voxels"] = str_trim(sprintf("%8.0f", res[, "N_Voxels"]))
res[1, c("N_Voxels", "P.value")] = NA
return(res)
}
res.adj = makeres(reses$adj.r.squared, "Adjusted R2")
res.r2 = makeres(reses$r.squared, "R2")
res.sd = makeres(reses$sigma, "RMSE")
aic = makeres(aics, "AIC", yes=FALSE)
aic$AIC = aic$AIC - min(aic$AIC)
aic$AIC = round(aic$AIC, 2)
epic = makeres(epics, "EPIC", yes=FALSE)
epic$EPIC = epic$EPIC - min(epic$EPIC)
epic$EPIC = round(epic$EPIC, 2)
results = merge(res.adj, res.r2)
results = merge(results, aic)
#results = merge(results, epic)
results = merge(results, res.sd)
results = results[order(results$P.value, na.last = FALSE),]
results[1,"N_Voxels"] = "Location Model"
# colnames(results) = c("Number of Voxels", "P-value", "Adjusted $R^2$", "$R^2$", "EPIC", "RMSE")
colnames(results) = c("Number of Voxels", "P-value", "Adjusted $R^2$", "$R^2$", "AIC", "RMSE")
return(results)
}
## ----get_best------------------------------------------------------------
get.best = function(results){
res = results
cn = colnames(results)
cn = cn[ ! cn%in% c("Number of Voxels", "P-value")]
for (icol in cn) results[, icol] = as.numeric(results[, icol])
x1 = sapply(-results[, c("Adjusted $R^2$", "$R^2$")], rank)
x2 = sapply(results[, c("AIC", "RMSE")], rank)
x = data.frame(cbind(x1, x2))
best = sapply(x, function(z) which(z == 1))
stopifnot(length(unique(best)) == 1)
best = best[1]
best.mod = results[best,]
# stopifnot(best.mod[, "P-value"] == .01)
loc = res[res[, "Number of Voxels"] == "Location Model",]
return(list(best.mod=best.mod, loc.mod = loc))
}
## ----runnihss------------------------------------------------------------
load('Regress_ROI_NIHSS_Results.Rda')
results = runres()
nihss.res = results
lres = get.best(results)
nihss.best = lres$best.mod
nihss.loc = lres$loc.mod
nihss.bestr2 = nihss.best$"$R^2$"
nihss.bestar2 = nihss.best$"Adjusted $R^2$"
nihss.locr2 = as.numeric(nihss.loc$"$R^2$")
nihss.locar2 = as.numeric(nihss.loc$"Adjusted $R^2$")
nihss.rat = sprintf("%.0f", (nihss.bestr2 / nihss.locr2 - 1) * 100)
nihss.arat = sprintf("%.0f", (nihss.bestar2 / nihss.locar2 - 1) * 100)
## ----rungcs--------------------------------------------------------------
load('Regress_ROI_GCS_Results.Rda')
results = runres()
gcs.res = results
lres = get.best(results)
gcs.best = lres$best.mod
gcs.loc = lres$loc.mod
gcs.bestr2 = gcs.best$"$R^2$"
gcs.bestar2 = gcs.best$"Adjusted $R^2$"
gcs.locr2 = as.numeric(gcs.loc$"$R^2$")
gcs.locar2 = as.numeric(gcs.loc$"Adjusted $R^2$")
gcs.rat = sprintf("%.0f", (gcs.bestr2 / gcs.locr2 - 1) * 100)
gcs.arat = sprintf("%.0f", (gcs.bestar2 / gcs.locar2 - 1) * 100)
## ------------------------------------------------------------------------
fname = "reoriented_Binary_Sum_Image_histogram_data.rda"
load(fname)
pimg = df$x
nvox40 = sum(pimg > .4)
props = pimg[pimg > 0]
mn.prop = round(mean(props)*100)
md.prop = round(median(props)*100)
n.md.prop = round(median(props) * N, 2)
## ----histdem-------------------------------------------------------------
##############################################
# plots of breakdowns of demographics
gsex = ggplot(demog, aes(Sex)) + geom_histogram() + ylab("Frequency") +
ggtitle("Distribution of Sex")
ggcs = ggplot(demog, aes(Enrollment_GCS_Add)) + geom_histogram(bin=.5) + ylab("Frequency") + xlab("GCS Score") +
ggtitle("Distribution of GCS Score")
gage = ggplot(demog, aes(Age)) + geom_histogram(binwidth=5) + ylab("Frequency") +
ggtitle("Distribution of Age") + xlab("Age (Years)")
gich = ggplot(demog, aes(Diagnostic_ICH)) + geom_histogram(binwidth=5) +
ylab("Frequency") +
ggtitle("Distribution of ICH Volume") +
xlab("Baseline ICH Volume (cc)")
gnihss = ggplot(demog, aes(Enrollment_NIHSS_Total)) + geom_histogram(binwidth=2) +
ylab("Frequency") +
ggtitle("Distribution of NIHSS Score") +
xlab("NIHSS Score")
pdf("histdem.pdf", width=6, height=4.5)
grid.arrange( gage, gich, ggcs, gnihss, ncol=2)
dev.off()
##############################################
## ----demog_tab-----------------------------------------------------------
##############################################
# Demographic Table
# demog$ICH_Volume
addbf = ""
colname = paste0("{", addbf, " N (%) or Mean (SD)}")
female =  as.character(round(prop.table(table(demog$Sex))*100, 1)["Female"])
vec= c("Age in Years: Mean (SD)" = mean.sd(demog$Age),
"Female" = n.pct(demog$Sex, "Female"),
#       "NIHSS Score: Mean (SD)" = mean.sd(demog$Enrollment_NIHSS_Total, na.rm=TRUE),
#       "GCS Score: Mean (SD)" = mean.sd(demog$Enrollment_GCS_Add, na.rm=TRUE),
"ICH Volume: Mean (SD)" = mean.sd(demog$Diagnostic_ICH, na.rm=TRUE),
"IVH Volume: Mean (SD)" = mean.sd(demog$Diagnostic_IVH, na.rm=TRUE)
)
race = n.pct(demog$Ethnicity)
names(race)[1] = "Race"
# vec = c(vec, race)
demog$Clot = demog$Clot_Location_RC
demog$Clot = gsub("Palidus", "Pallidus", demog$Clot)
clot = n.pct(demog$Clot)
clottab = sort(table(demog$Clot), decreasing = TRUE)
clottab = paste0(tolower(names(clottab)), " ($N{=}", clottab, "$)")
clottab[length(clottab)] = paste0("and ", clottab[length(clottab)])
clottab = paste(clottab, collapse = ", ")
names(clot)[1] = "Reader-Classified ICH Location"
vec = c(vec, clot)
df = data.frame(vec, stringsAsFactors=FALSE)
colnames(df) = colname
addtorow <- list()
addtorow$pos <- list()
addtorow$pos[[1]] <- -1
addtorow$command <- paste0("\\hline {", addbf, " Variable (N=", N, ")}")
# paste0("Descriptive statistics of the demographic",
# " and ICH information for the patients in this study.")
xtab = xtable(df,
caption= "", align=c("lc"),
label="t:dem")
print.xtable(xtab, file="demographics.tex", sanitize.rownames.function=sfunc, add.to.row=addtorow, hline.after = c(0:nrow(xtab)), sanitize.colnames.function=sfunc)
# paste0("Descriptive statistics of the demographic",
# " information for the patients.")
xtab = xtable(df,
caption= "", align=c("lc"),
label="t:dem")
print.xtable(xtab, file="demographics.tex", sanitize.rownames.function=sfunc, add.to.row=addtorow, hline.after = c(0:nrow(xtab)), sanitize.colnames.function=sfunc)
##############################################
# Demographic Table
colname = paste0("{", addbf, " N (%) or Mean (SD)}")
vec= c("Age in Years: Mean (SD)" = mean.sd(demog$Age),
"NIHSS Score: Mean (SD)" = mean.sd(demog$Enrollment_NIHSS_Total, na.rm=TRUE))
demog$Clot = demog$Clot_Location_RC
demog$Clot = gsub("Palidus", "Pallidus", demog$Clot)
clot = n.pct(demog$Clot_Location_RC)
names(clot)[1] = "Reader-Classified ICH Location"
vec = c(vec, clot)
df = data.frame(vec, stringsAsFactors=FALSE)
colnames(df) = colname
addtorow <- list()
addtorow$pos <- list()
addtorow$pos[[1]] <- -1
addtorow$command <- paste0("\\hline {", addbf, " Variable (N = ", N, ")}")
# paste0("Descriptive statistics of the demographic",
# " information for the patients.")
xtab = xtable(df,
caption= "", align=c("lc"),
label="t:dem")
print.xtable(xtab, file="demographics_short.tex", sanitize.rownames.function=sfunc, add.to.row=addtorow, hline.after = c(0:nrow(xtab)), sanitize.colnames.function=sfunc)
## ------------------------------------------------------------------------
### just getting the N and percent for each location
xx = load('Regress_ROI_NIHSS_Results.Rda')
out2 = out = ""
LLEV = length(loc.levs)
loc.levs = revalue(loc.levs, c("Lobar"="Putamen", "Putamen"="Lobar"))
com = ifelse(LLEV == 2, "", ",")
for (ilev in seq_along(loc.levs)){
lev = loc.levs[ilev]
n = loc.tab[lev]
pct = loc.ptab[ilev]
if (ilev == LLEV) {
out = paste0(out, "and ")
out2 = paste0(out2, 'and ')
}
out = paste0(out, lev, " ($N=", n, "$)", com, " ")
out2 = paste0(out2, lev, com, " ")
}
out = str_trim(out)
out2 = str_trim(out2)
out = gsub(",$", "", out)
out2 = gsub(",$", "", out2)
out2= tolower(out2)
rm(list=xx)
## ------------------------------------------------------------------------
load('Regress_ROI_NIHSS_Results.Rda')
res = reses$adj.r.squared
res = res[, c("pval", "nkeep")]
res = data.frame(res)
# res$nkeep = sprintf("%.0f", res$nkeep)
fc = function(x) {
formatC(x, digits=6, big.mark=",")
}
res$nkeep = fc(res$nkeep)
## ------------------------------------------------------------------------
load('Regress_ROI_GCS_Results.Rda')
gres = reses$adj.r.squared
gres = gres[, c("pval", "nkeep")]
gres = data.frame(gres)
# gres$nkeep = sprintf("%.0f", gres$nkeep)
gres$nkeep = fc(gres$nkeep)
## ----make_breakdown------------------------------------------------------
load("Top_0.01_Pvalues_df.Rda")
n = 10
nihss.tab = head(pvalimg.tab[["EVE_1"]], n)
nihss.tab$nvox = sprintf("%02.1f", nihss.tab$nvox)
nihss.tab = nihss.tab[, c("nvox", "area")]
names(nihss.tab) = c("NIHSS HPR", "Area")
load("GCS_Top_1000_Pvalues_df.Rda")
gcs.tab = head(pvalimg.tab[["EVE_1"]], n)
gcs.tab = gcs.tab[, c("nvox", "area")]
gcs.tab$nvox = sprintf("%02.1f", gcs.tab$nvox)
names(gcs.tab) = c("GCS HPR", "Area")
load("Population_Table.Rda")
pop.tab = head(xtabs[["EVE_1"]], n)
pop.tab = pop.tab[, c("Area", "EVE_1")]
pop.tab$EVE_1 = sprintf("%02.1f", pop.tab$EVE_1)
names(pop.tab) = c("Area", "Population Prevalence")
pop.tab$Area = revalue(pop.tab$Area, c("Ventricles" = "Background"))
# names(jhut1.list)[names(jhut1.list) == "Background"] = "Ventricles"
df = merge(pop.tab, nihss.tab, sort=FALSE, all = TRUE)
df = merge(df, gcs.tab, sort=FALSE, all = TRUE)
proper = function(x){
substring(x, 1, 1) <- toupper(substring(x, 1, 1))
substring(x, 2) <- tolower(substring(x, 2))
x
}
df$Area = proper(df$Area)
df$Area = revalue(df$Area, c("Background" = "CSF (ventricular & subarachnoid spaces)",
"Insular" = "Insula"))
# df$Area = revalue(df$Area, c("Csf" = "CSF (ventricular & subarachnoid spaces)"))
df$Area = gsub("_", " ", df$Area)
df = df[order(as.numeric(df$"Population Prevalence"),
as.numeric(df[, "NIHSS HPR"]),
as.numeric(df[, "GCS HPR"]),
decreasing=TRUE),]
df[sapply(df, is.na)] = ""
rownames(df) = NULL
xtab = xtable(df)
fullcap = paste0("Distribution of the top 10 areas of engagement ",
"for population ",
" 3D histogram, the NIHSS HPR based on a p-value ",
" threshold of .01, the GCS HPR based on voxels ",
"with 1000 smallest p-values.  Each value represents ",
"the percentage of the HPR engaged in this area.  ",
"The population-level areas are percentages ",
"weighted by proportion. Each distribution ",
" of areas is based on the Eve atlas.  ",
"We see that the population is engaged in ",
"areas of the CSF, such as the ventricles, and ",
" the insula and putaminal regions.",
" The HPR based on the NIHSS analysis engages ",
"primarily areas of the internal capsule ",
"and CSF regions. ",
"The HPR based on the GCS analysis engages ",
"primarily the thalamus and superior ",
"corona radiata. ",
"These percentages  ",
" can be calculated on a per-scan level as well.")
fullcap = NULL
fullcap = "Percent engagement of the 3D histogram and top-performing HPR for the top 10 areas of engagement"
xtab = xtable(df,
caption= fullcap,
align=c("llccc"),
label="t:breakdown")
print.xtable(xtab, file="breakdown.tex", include.rownames = FALSE)
## ----make_colbreakdown---------------------------------------------------
load("collapsed_pvalues_df/Top_0.01_Pvalues_df.Rda")
n = 10
nihss.tab = head(col.pvalimg.tab[["EVE_1"]], n)
nihss.tab$nvox = sprintf("%02.1f", nihss.tab$nvox)
nihss.tab = nihss.tab[, c("nvox", "area")]
names(nihss.tab) = c("NIHSS HPR", "Area")
load("collapsed_pvalues_df/GCS_Top_1000_Pvalues_df.Rda")
gcs.tab = head(col.pvalimg.tab[["EVE_1"]], n)
gcs.tab = gcs.tab[, c("nvox", "area")]
gcs.tab$nvox = sprintf("%02.1f", gcs.tab$nvox)
names(gcs.tab) = c("GCS HPR", "Area")
load("collapsed_pvalues_df/Population_Table.Rda")
pop.tab = head(col.xtabs[["EVE_1"]], n)
pop.tab = pop.tab[, c("Area", "EVE_1")]
pop.tab$EVE_1 = sprintf("%02.1f", pop.tab$EVE_1)
names(pop.tab) = c("Area", "Population Prevalence")
pop.tab$Area = revalue(pop.tab$Area, c("Ventricles" = "Background"))
# names(jhut1.list)[names(jhut1.list) == "Background"] = "Ventricles"
gcs.tab$Area = revalue(gcs.tab$Area, c("Background" = "CSF (ventricular & subarachnoid spaces)"))
nihss.tab$Area = revalue(nihss.tab$Area, c("Background" = "CSF (ventricular & subarachnoid spaces)"))
df = pop.tab
# df = merge(pop.tab, nihss.tab, sort=FALSE, all = TRUE)
# df = merge(df, gcs.tab, sort=FALSE, all = TRUE)
proper = function(x){
substring(x, 1, 1) <- toupper(substring(x, 1, 1))
substring(x, 2) <- tolower(substring(x, 2))
x
}
df$Area = proper(df$Area)
df$Area = revalue(df$Area, c("Background" = "CSF (ventricular & subarachnoid spaces)"))
df$Area = revalue(df$Area, c("Csf" = "CSF (ventricular & subarachnoid spaces)"))
df$Area = gsub("_", " ", df$Area)
df$Area = gsub(" wm( |)", " WM ", df$Area)
df$Area = str_trim(df$Area)
df = df[order(as.numeric(df$"Population Prevalence"),
#              as.numeric(df[, "NIHSS HPR"]),
#              as.numeric(df[, "GCS HPR"]),
decreasing=TRUE),]
df[sapply(df, is.na)] = ""
rownames(df) = NULL
xtab = xtable(df)
fullcap = paste0("Distribution of the top 10 areas of engagement ",
"for population ",
" 3D histogram, the NIHSS HPR based on a p-value ",
" threshold of .01, the GCS HPR based on voxels ",
"with 1000 smallest p-values.  Each value represents ",
"the percentage of the HPR engaged in this area.  ",
"The population-level areas are percentages ",
"weighted by proportion. Each distribution ",
" of areas is based on the Eve atlas.  ",
"We see that the population is engaged in ",
"areas of the CSF, such as the ventricles, and ",
" the insula and putaminal regions.",
" The HPR based on the NIHSS analysis engages ",
"primarily areas of the internal capsule, thalamus, superior corona radiata, ",
"and ventricular regions. ",
"The HPR based on the GCS analysis engages ",
"primarily the thalamus and superior ",
"corona radiata. ",
"These percentages  ",
" can be calculated on a per-scan level as well.")
fullcap = NULL
fullcap = "Distribution of the top 10 areas of engagement"
xtab = xtable(df,
caption= fullcap,
align=c("llc"),
label="t:breakdown")
print.xtable(xtab, file="colbreakdown.tex", include.rownames = FALSE)
## ----make_area_breakdown-------------------------------------------------
proper = function(x){
substring(x, 1, 1) <- toupper(substring(x, 1, 1))
substring(x, 2) <- tolower(substring(x, 2))
x
}
make.area = function(x, cn){
x = data.frame(x)
x$Area = rownames(x)
x = x[, c("EVE_1", "Area"), drop=FALSE]
x$EVE_1 = sprintf("%02.1f", x$EVE_1 * 100)
colnames(x) = c(cn, "Area")
x
}
load("Top_0.01_Pvalues_df.Rda")
nihss.tab = pvalimg.tab[["EVE_1"]]
nihss.tab = nihss.tab[order(nihss.tab$roi_mean_pct, decreasing=TRUE),]
nihss.tab = nihss.tab[, c("roi_mean_pct", "area")]
nihss.tab$roi_mean_pct = sprintf("%02.1f", nihss.tab$roi_mean_pct)
names(nihss.tab) = c("NIHSS HPR", "Area")
nihss.ppct = make.area(ppcts, "NIHSS HPR")
load("GCS_Top_1000_Pvalues_df.Rda")
gcs.tab = pvalimg.tab[["EVE_1"]]
gcs.tab = gcs.tab[order(gcs.tab$roi_mean_pct, decreasing=TRUE),]
gcs.tab = gcs.tab[, c("roi_mean_pct", "area")]
gcs.tab$roi_mean_pct = sprintf("%02.1f", gcs.tab$roi_mean_pct)
names(gcs.tab) = c("GCS HPR", "Area")
gcs.ppct = make.area(ppcts, "GCS HPR")
load("Population_Table.Rda")
pop.tab = dfs[["EVE_1"]]
pop.tab = pop.tab[order(pop.tab$EVE_1_ROI_Pct, decreasing=TRUE),]
pop.tab = pop.tab[, c("EVE_1_ROI_Pct", "Area")]
pop.tab$EVE_1_ROI_Pct = sprintf("%02.1f", pop.tab$EVE_1_ROI_Pct)
names(pop.tab) = c("Population Engagement", "Area")
pop.pcts = make.area(pop.pcts, "Population Engagement")
makedf = function(df){
df = df[
grep("GLOBUS_PALLIDUS|THALAMUS|PUTAMEN", df$Area),]
df$Area = proper(df$Area)
df$Area = revalue(df$Area, c("Background" = "CSF (ventricular & subarachnoid spaces)"),
warn_missing = FALSE)
df$Area = gsub("_", " ", df$Area)
df = df[order(df$Area),]
df[sapply(df, is.na)] = ""
rownames(df) = NULL
df
}
df = merge(pop.tab, nihss.tab, sort=FALSE, all = TRUE)
df = merge(df, gcs.tab, sort=FALSE, all = TRUE)
df = makedf(df)
col.df = merge(pop.pcts, nihss.ppct, sort=FALSE, all = TRUE)
col.df = merge(col.df, gcs.ppct, sort=FALSE, all = TRUE)
col.df = makedf(col.df)
col.df$Area = paste0(col.df$Area, ": Total")
df$Area = gsub(" left", ": Left", df$Area)
df$Area = gsub(" right", ": Right", df$Area)
m = merge(df, col.df, all=TRUE)
m$Area = gsub("pallidus", "Pallidus", m$Area)
m$A = sapply(strsplit(m$Area, ":"), `[`, 1)
m$S = 3:1
m = m[order(m$A, m$S),]
# xtab = xtable(m)
cn = colnames(m)
cn = cn[ !(cn %in% c("A", "S"))]
fullcap =                 paste0("Engagement of the Thalamus, Putamen and Globus Pallidus by the",
" population ",
" 3D histogram, the NIHSS HPR based on a p-value ",
" threshold of $.01$, the GCS HPR based on voxels ",
"with $1000$ smallest p-values.  Each distribution ",
" is based on the Eve atlas.  The population engagement represents the ",
"mean proportion of engagement for that brain region over all patient ICH masks.  ",
"The HPR columns represent the percent of voxels in that brain region that ",
" are in the HPR for NIHSS and GCS scores.  ",
" On average, $23\\%$ of the Putamen, $20\\%$ of the Globus Pallidus, and $8\\%$ of the Thalamus are ",
" engaged with ICH from patients in this study.  The HPR from the NIHSS analysis engages $40\\%$ of",
" the Globus Pallidus, $6\\%$ of the Putamen, and $9\\%$ of the Thalamus.  The HPR from the GCS analysis",
" engages only $2\\%$ of the Thalamus, but not the Putamen nor the Globus Pallidus; the GCS HPR is only",
" $1000$ voxels.  All engagement is higher on the left side compared to the right. ",
"The Eve ",
"atlas can be used to calculate area engagement",
" on a per-scan level as well to give, for example, putaminal engagement with ICH at a scan level. ")
fullcap = NULL
fullcap = "Thalamus, Putamen and Globus Pallidus ICH Engagement by the population and NIHSS/GCS HPR"
xtab = xtable(m[, cn],
caption= fullcap,
align=c("llccc"),
label="t:area_breakdown")
print.xtable(xtab, file="area_breakdown.tex", include.rownames = FALSE)
source('~/Dropbox/PhD_Thesis/phd/CT_Pipeline_Template_1800words_2015Mar25.R')
source('~/.active-rstudio-document', echo=TRUE)
clott
addbf = ""
colname = paste0("{", addbf, " N (%) or Mean (SD)}")
female =  as.character(round(prop.table(table(demog$Sex))*100, 1)["Female"])
vec= c("Age in Years: Mean (SD)" = mean.sd(demog$Age),
"Female" = n.pct(demog$Sex, "Female"),
#       "NIHSS Score: Mean (SD)" = mean.sd(demog$Enrollment_NIHSS_Total, na.rm=TRUE),
#       "GCS Score: Mean (SD)" = mean.sd(demog$Enrollment_GCS_Add, na.rm=TRUE),
"ICH Volume: Mean (SD)" = mean.sd(demog$Diagnostic_ICH, na.rm=TRUE),
"IVH Volume: Mean (SD)" = mean.sd(demog$Diagnostic_IVH, na.rm=TRUE)
)
race = n.pct(demog$Ethnicity)
names(race)[1] = "Race"
# vec = c(vec, race)
demog$Clot = demog$Clot_Location_RC
demog$Clot = gsub("Palidus", "Pallidus", demog$Clot)
clot = n.pct(demog$Clot)
clottab = sort(table(demog$Clot), decreasing = TRUE)
clottab = paste0(tolower(names(clottab)), " ($N{=}", clottab, "$)")
clottab[length(clottab)] = paste0("and ", clottab[length(clottab)])
clottab = paste(clottab, collapse = ", ")
names(clot)[1] = "Reader-Classified ICH Location"
vec = c(vec, clot)
clottab
clot
table(demog$Clot)
source('~/.active-rstudio-document', echo=TRUE)
rm(list=ls())
library(ggplot2)
library(xtable)
library(gridExtra)
library(stringr)
library(plyr)
check.na = function(x){
stopifnot(all(!is.na(x)))
}
imag = read.csv("Imaging_Information.csv")
imag$patientName = imag$id
imag$id = NULL
alldemog = read.csv("All_180_FollowUp_wDemographics.csv")
alldemog$Diagnostic_IVH = round(alldemog$IVH_Dx_10 *10, 7)
alldemog = alldemog[, c("patientName", "Diagnostic_IVH")]
demog = read.csv("Demog_NIHSS_Mask.csv")
demog = merge(demog, imag, all=TRUE)
demog = merge(demog, alldemog, all.x=TRUE)
N = nrow(demog)
check.na(demog$Sex)
sum.fem = sum(demog$Sex == "Female")
pct.fem = round(mean(demog$Sex == "Female")*100, 1)
check.na(demog$Age)
r.age = range(demog$Age)
m.age = round(mean(demog$Age), digits = 1)
demog$Base_ICH_10 = demog$Diagnostic_ICH / 10
