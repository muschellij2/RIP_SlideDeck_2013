}
library(plyr)
first_date = "2014-01-10"
today = Sys.Date()
long_today = format(Sys.time(), "%B %d, %Y")
packs = c("fslr", "brainR", "matlabr", "spm12r", "WhiteStripe")
dl = cran_downloads( from = first_date, to = today,
packages = packs)
dl = ddply(dl, .(package), summarise, count = sum(count))
cn = dl$package
dl = dl$count
names(dl) = cn
dl
cn
dl
if (!require(cranlogs)) {
library(devtools)
install_github("metacran/cranlogs")
}
library(plyr)
first_date = "2014-01-10"
today = Sys.Date()
long_today = format(Sys.time(), "%B %d, %Y")
packs = c("fslr", "brainR", "matlabr", "spm12r", "WhiteStripe")
dl = cran_downloads( from = first_date, to = today,
packages = packs)
dl = ddply(dl, .(package), summarise, count = sum(count))
dl
if (!require(cranlogs)) {
library(devtools)
install_github("metacran/cranlogs")
}
library(plyr)
first_date = "2014-01-10"
today = Sys.Date()
long_today = format(Sys.time(), "%B %d, %Y")
packs = c("fslr", "brainR", "matlabr", "spm12r", "WhiteStripe")
dl = cran_downloads( from = first_date, to = today,
packages = packs)
dl = ddply(dl, .(package), summarise, Downloads = sum(count))
cn = dl$package
dl
dl = arrange(dl, Downloads)
dl
dl = arrange(dl, desc(Downloads))
dl
library(DT)
datatable(dl)
?datatable
xtab = xtable(dl)
library(xtable)
xtab = xtable(dl)
xtab
print.xtable(xtab, type = "html")
?xtable
?print.xtable
print.xtable(xtab, type = "html", include.rownames = FALSE)
source('~/.active-rstudio-document', echo=TRUE)
citep{"carp_secret_2012"}
library(RefManageR)
library(knitcitations)
bib <- ReadBib(file.path(knitdir, 'Oral_Proposal.bib'))
x = sapply(bib, citep)
bibliography()
?datatable
if (!require(cranlogs)) {
library(devtools)
install_github("metacran/cranlogs")
}
library(plyr)
first_date = "2014-01-10"
today = Sys.Date()
long_today = format(Sys.time(), "%B %d, %Y")
packs = c("fslr", "brainR", "matlabr", "spm12r", "WhiteStripe", "ggplot2")
dl = cran_downloads( from = first_date, to = today,
packages = packs)
dl = ddply(dl, .(package), summarise, Downloads = sum(count))
dl = arrange(dl, desc(Downloads))
colnames(dl)[1] = "Package"
head(dl)
?cran_downloads
if (!require(cranlogs)) {
library(devtools)
install_github("metacran/cranlogs")
}
library(plyr)
first_date = "2014-01-10"
today = Sys.Date()
long_today = format(Sys.time(), "%B %d, %Y")
packs = c("fslr", "brainR", "matlabr", "spm12r", "WhiteStripe")
dl = cran_downloads( from = first_date, to = today,
packages = packs)
last_week = cran_downloads( when = "last-week",
packages = packs)
dl = ddply(dl, .(package), summarise, Downloads = sum(count))
dl = arrange(dl, desc(Downloads))
colnames(dl)[1] = "Package"
laste_we
last_week
if (!require(cranlogs)) {
library(devtools)
install_github("metacran/cranlogs")
}
library(plyr)
first_date = "2014-01-10"
today = Sys.Date()
long_today = format(Sys.time(), "%B %d, %Y")
packs = c("fslr", "brainR", "matlabr", "spm12r", "WhiteStripe")
last_week = cran_downloads( when = "last-week",
packages = packs)
last_week = ddply(last_week, .(package), summarise,
Downloads = sum(count))
dl = cran_downloads( from = first_date, to = today,
packages = packs)
dl = ddply(dl, .(package), summarise, Downloads = sum(count))
dl = arrange(dl, desc(Downloads))
colnames(dl)[1] = "Package"
last_week
if (!require(cranlogs)) {
library(devtools)
install_github("metacran/cranlogs")
}
library(plyr)
first_date = "2014-01-10"
today = Sys.Date()
long_today = format(Sys.time(), "%B %d, %Y")
packs = c("fslr", "brainR", "matlabr", "spm12r", "WhiteStripe")
last_week = cran_downloads( when = "last-week",
packages = packs)
last_week = ddply(last_week, .(package), summarise,
Downloads = sum(count))
dl = cran_downloads( from = first_date, to = today,
packages = packs)
dl = ddply(dl, .(package), summarise, All_Downloads = sum(count))
dl = arrange(dl, desc(Downloads))
merge(dl, last_week)
if (!require(cranlogs)) {
library(devtools)
install_github("metacran/cranlogs")
}
library(plyr)
first_date = "2014-01-10"
today = Sys.Date()
long_today = format(Sys.time(), "%B %d, %Y")
packs = c("fslr", "brainR", "matlabr", "spm12r", "WhiteStripe")
last_week = cran_downloads( when = "last-week",
packages = packs)
last_week = ddply(last_week, .(package), summarise,
Last_Week = sum(count))
dl = cran_downloads( from = first_date, to = today,
packages = packs)
dl = ddply(dl, .(package), summarise, All_Time = sum(count))
dl = arrange(dl, desc(Downloads))
dl = merge(dl, last_week)
dl
if (!require(cranlogs)) {
library(devtools)
install_github("metacran/cranlogs")
}
library(plyr)
first_date = "2014-01-10"
today = Sys.Date()
long_today = format(Sys.time(), "%B %d, %Y")
packs = c("fslr", "brainR", "matlabr", "spm12r", "WhiteStripe")
last_week = cran_downloads( when = "last-week",
packages = packs)
last_week = ddply(last_week, .(package), summarise,
Last_Week = sum(count))
dl = cran_downloads( from = first_date, to = today,
packages = packs)
dl = ddply(dl, .(package), summarise, All_Time = sum(count))
dl = arrange(dl, desc(All_Time))
dl = merge(dl, last_week)
dl
colnames(dl)[1] = "Package"
dl
rm(list=ls())
library(fslr)
library(cttools)
library(scales)
homedir = path.expand("~/CT_Registration/Segmentation/")
outdir = path.expand("~/CT_Registration/Oral_Proposal/figure")
datadir = file.path(homedir, "Seg_Figure")
resdir = file.path(homedir, "results")
system(sprintf("open %s", datadir))
rm(list=ls())
library(fslr)
library(cttools)
library(scales)
homedir = path.expand("~/CT_Registration/Segmentation/")
outdir = path.expand("~/CT_Registration/Oral_Proposal/figure")
datadir = file.path(homedir, "Seg_Figure")
resdir = file.path(homedir, "results")
rda = file.path(resdir, "Smooth_Model_Cutoffs.Rda")
load(rda)
cutoff = all.scuts["mod_agg"]
img = readNIfTI(file.path(datadir,
"161-413_20110710_1619_CT_2_HEAD_Head.nii.gz"),
reorient=FALSE)
ssimg = readNIfTI(file.path(datadir,
"161-413_20110710_1619_CT_2_HEAD_Head_SS_0.01.nii.gz"),
reorient=FALSE)
ssmask = readNIfTI(file.path(datadir,
"161-413_20110710_1619_CT_2_HEAD_Head_SS_0.01_Mask.nii.gz"),
reorient=FALSE)
roi = readNIfTI(file.path(datadir,
"161-413_20110710_1619_CT_2_HEAD_HeadROI.nii.gz"),
reorient=FALSE)
zval2 = readNIfTI(file.path(datadir,
"161-413_20110710_1619_CT_2_HEAD_Head_zval2.nii.gz"),
reorient=FALSE)
pred = readNIfTI(file.path(datadir,
"161-413_20110710_1619_CT_2_HEAD_Head_mod_agg.nii.gz"),
reorient=FALSE)
pred = pred > cutoff
# mask.overlay(img, pred, window=c(0, 100))
# mask.overlay(img, roi, window=c(0, 100))
d = array(0, dim=dim(pred))
d[pred == 1 & roi == 1] = 1
d[pred == 1 & roi == 0] = 2
d[pred == 0 & roi == 1] = 2
plevs = c("Correct Prediction", "Incorrect Prediction")
d = niftiarr(pred, d)
xyz = cog(roi, ceil = TRUE)
rm(list=ls())
library(fslr)
library(cttools)
library(scales)
homedir = path.expand("~/CT_Registration/Segmentation/")
outdir = path.expand("~/CT_Registration/Oral_Proposal/figure")
datadir = file.path(homedir, "Seg_Figure")
resdir = file.path(homedir, "results")
rda = file.path(resdir, "Smooth_Model_Cutoffs.Rda")
load(rda)
cutoff = all.scuts["mod_agg"]
img = readNIfTI(file.path(datadir,
"161-413_20110710_1619_CT_2_HEAD_Head.nii.gz"),
reorient=FALSE)
ssimg = readNIfTI(file.path(datadir,
"161-413_20110710_1619_CT_2_HEAD_Head_SS_0.01.nii.gz"),
reorient=FALSE)
ssmask = readNIfTI(file.path(datadir,
"161-413_20110710_1619_CT_2_HEAD_Head_SS_0.01_Mask.nii.gz"),
reorient=FALSE)
roi = readNIfTI(file.path(datadir,
"161-413_20110710_1619_CT_2_HEAD_HeadROI.nii.gz"),
reorient=FALSE)
zval2 = readNIfTI(file.path(datadir,
"161-413_20110710_1619_CT_2_HEAD_Head_zval2.nii.gz"),
reorient=FALSE)
pred = readNIfTI(file.path(datadir,
"161-413_20110710_1619_CT_2_HEAD_Head_mod_agg.nii.gz"),
reorient=FALSE)
pred = pred > cutoff
# mask.overlay(img, pred, window=c(0, 100))
# mask.overlay(img, roi, window=c(0, 100))
d = array(0, dim=dim(pred))
d[pred == 1 & roi == 1] = 1
d[pred == 1 & roi == 0] = 2
d[pred == 0 & roi == 1] = 2
plevs = c("Correct Prediction", "Incorrect Prediction")
d = niftiarr(pred, d)
xyz = cog(roi, ceil = TRUE)
pngname = file.path(resdir, "SS_Image_PrePredict.png")
png(filename = pngname, res=600, height=7, width=7, units= "in")
ortho2(ssimg,
window=c(0, 100),
xyz=xyz,
text = "Image",
text.cex = 2.3
)
dev.off()
pngname = file.path(resdir, "SS_Image_PrePredict_ROI.png")
png(filename = pngname, res=600, height=7, width=7, units= "in")
mask.overlay(ssimg, roi,
window=c(0, 100),
xyz=xyz,
text = "Manual\n Segmentation",
text.cex = 2.3
)
dev.off()
pngname = file.path(outdir, "SS_Image_PrePredict_ROI_Mask.png")
png(filename = pngname, res=600, height=7, width=7, units= "in")
ortho2(roi,
xyz=xyz,
text = "Manual\n Segmentation Mask",
text.cex = 2.3
)
dev.off()
pngname = file.path(resdir, "SS_Image_PrePredict_Auto.png")
png(filename = pngname, res=600, height=7, width=7, units= "in")
mask.overlay(ssimg, pred,
window=c(0, 100),
xyz=xyz,
text = "Automatic\n Segmentation",
text.cex = 2.3
)
dev.off()
pngname = file.path(resdir, "Prediction_Figure.png")
png(filename = pngname, res=600, height=7, width=7, units= "in")
mask.overlay(ssimg, d, col.y = c("blue", "red"),
window=c(0, 100),
ybreaks = c(0.5, 1.5, 2.5),
addlegend = TRUE,
leg.x = 2, leg.y= 60,
leg.col = c("blue", "red"),
leg.cex=2.3,
leg.title = "Prediction of ICH",
legend=plevs,
xyz=xyz
)
dev.off()
pngname = file.path(resdir, "Manual_Figure_Slice.png")
ximg = window_img(img, window=c(0, 100), replace = "window")
iimg = ximg
X = nrow(iimg)
Y = ncol(iimg)
p2 = roi
p2[roi == 0]= NA
png(filename = pngname, res=600, height=7, width=7, units= "in")
par( oma = rep(0, 4), mar = c(1, 1, 2, 1), bg = "black")
image(iimg[,, z = 17],
col=gray(0:64/64),
bg = "black")
image(p2[,,z = 17],
col = alpha("red", 0.5), add=TRUE)
title(main="Manual Segmentation", col.main="white", cex.main=2,
outer = FALSE)
# text(0.5, .98, label="Manual Segmentation", col="white", cex=2)
dev.off()
p2 = pred
p2[pred == 0]= NA
pngname = file.path(resdir, "Prediction_Figure_Slice.png")
png(filename = pngname, res=600, height=7, width=7, units= "in")
par( oma = rep(0, 4), mar = c(1, 1, 2, 1), bg = "black")
iimg = ximg
iimg[pred == 1] = 110
# image(iimg[,, z = 17],
#       col=c(gray(0:63/64), rep("white", 3), alpha('red', 0.75)),
#       bg = "black")
image(ximg[,, z = 17],
col=gray(0:64/64),
bg = "black")
image(p2[,,z = 17],
col = alpha("blue", 0.75), add=TRUE)
title(main="Automatic Segmentation", col.main="white", cex.main=2,
outer = FALSE)
# text(0.5, .95, label="Automatic Segmentation", col="white", cex=2)
dev.off()
proi = roi
proi[roi == 0]= NA
ppred = pred
ppred[pred == 0]= NA
plevs2 = c("False Negative", "False Positive", "True Positive")
pngname = file.path(resdir, "ManAuto_Figure_Slice.png")
png(filename = pngname, res=600, height=7, width=7, units= "in")
par( oma = rep(0, 4), mar = c(0, 1, 2, 1), bg = "black", xpd=TRUE)
yind = 50:(512-20)
xind = 80:(512-100)
xx = ximg[,, z = 17][xind, yind]
X = nrow(xx)
Y = ncol(xx)
image(1:X, 1:Y, xx,
# image(ximg[,, z = 17][xind, yind],
col=gray(0:64/64),
bg = "black")
proi.mat = proi[,,z = 17][xind, yind]
ppred.mat = ppred[,,z = 17][xind, yind]
both = proi.mat * ppred.mat
cpred = !(ppred.mat %in% 1 & !(proi.mat %in% 1))
croi = !(proi.mat %in% 1 & !(ppred.mat %in% 1))
ppred.mat[ cpred ] = NA
proi.mat[ croi ] = NA
image(1:X, 1:Y, both,
col = alpha('purple', 0.65), add=TRUE)
image(1:X, 1:Y, proi.mat,
col = alpha('red', 0.65), add=TRUE)
image(1:X, 1:Y, ppred.mat,
col = alpha('blue', 0.65),  add=TRUE)
# title(main="Automatic Segmentation", col.main="white", cex.main=2,
#       outer = FALSE)
legend(x = 40,
y= 50,
col = c("red", "blue", "purple"),
border = "black",
bg = "black",
text.col = "white",
lty = rep(1, 3),
lwd = 10,
cex=1,
horiz = TRUE,
legend=plevs2)
# text(0.5, .95, label="Automatic Segmentation", col="white", cex=2)
dev.off()
pngname = file.path(resdir, "Manual_Slice.png")
png(filename = pngname, res=600, height=7, width=7, units= "in")
par( oma = rep(0, 4), mar = c(0, 1, 2, 1), bg = "black", xpd=TRUE)
yind = 50:(512-20)
xind = 80:(512-100)
xx = ximg[,, z = 17][xind, yind]
X = nrow(xx)
Y = ncol(xx)
image(1:X, 1:Y, xx,
# image(ximg[,, z = 17][xind, yind],
col=gray(0:64/64),
bg = "black")
proi.mat = proi[,,z = 17][xind, yind]
image(1:X, 1:Y, proi.mat,
col = alpha('red', 0.65), add=TRUE)
title(main="Automatic Segmentation", col.main="white", cex.main=2,
outer = FALSE)
dev.off()
pngname = file.path(resdir, "Voxel_Selection.png")
png(filename = pngname, res=600, height=7, width=7, units= "in")
par( oma = rep(0, 4), mar = c(0, 1, 2, 1), bg = "black", xpd=TRUE)
yind = 50:(512-20)
xind = 80:(512-100)
xx = zval2[,, z = 17][xind, yind]
X = nrow(xx)
Y = ncol(xx)
image(1:X, 1:Y, xx,
# image(ximg[,, z = 17][xind, yind],
col=gray(0:64/64),
bg = "black")
title(main="Candidate Voxels", col.main="white", cex.main=2,
outer = FALSE)
dev.off()
pngname = file.path(resdir, "SS_Figure.png")
png(filename = pngname, res=600, height=7, width=7, units= "in")
mask.overlay(img, ssmask, col.y = alpha("red", 0.5),
window=c(0, 100),
text = "Brain Extraction")
dev.off()
xyz= cog(roi, ceil=TRUE)
stub = '161-413_20110710_1619_CT_2_HEAD_Head'
x = list.files(datadir,
pattern = paste0(stub, ".*[.]nii[.]gz$"),
full.names = TRUE)
x = x[!grepl("Rigid", x)]
x = x[!grepl("Affine", x)]
x = x[!grepl("N3", x)]
x = x[!grepl("N4", x)]
x = x[!grepl("SyN", x)]
x = x[!grepl("zval_", x)]
x = x[!grepl("model", x)]
x = x[!grepl("smoothed", x)]
x = x[!grepl("row", x)]
x = x[!grepl("mod_agg", x)]
x = x[!grepl("_gam", x)]
x = c(x, file.path(datadir, paste0(stub, '.nii.gz')))
x = x[!grepl("usemask", x)]
mask = readNIfTI(file.path(datadir, paste0(stub, "_usemask")),
reorient=FALSE)
iimg = 12
x
xyz= cog(roi, ceil=TRUE)
stub = '161-413_20110710_1619_CT_2_HEAD_Head'
x = list.files(datadir,
pattern = paste0(stub, ".*[.]nii[.]gz$"),
full.names = TRUE)
x = x[!grepl("Rigid", x)]
x = x[!grepl("Affine", x)]
x = x[!grepl("N3", x)]
x = x[!grepl("N4", x)]
x = x[!grepl("SyN", x)]
x = x[!grepl("zval_", x)]
x = x[!grepl("model", x)]
x = x[!grepl("smoothed", x)]
x = x[!grepl("row", x)]
x = x[!grepl("mod_agg", x)]
x = x[!grepl("_gam", x)]
x = c(x, file.path(datadir, paste0(stub, '.nii.gz')))
x = x[!grepl("usemask", x)]
mask = readNIfTI(file.path(datadir, paste0(stub, "_usemask")),
reorient=FALSE)
iimg = 12
x
grep("smooth5", x)
iimg = 11
pngname= nii.stub(x[iimg], bn=TRUE)
pngname = gsub("SS_0.01_", "", pngname)
pngname = file.path(resdir,
paste0(pngname, ".png"))
if (!file.exists(pngname)){
xx =x[iimg]
img = readNIfTI(x[iimg], reorient = FALSE)
img[mask == 0] = NA
#     img[img < 0] = -1
#     img[img > 100] = 101
if (length(unique(c(img))) > 3){
img = robust_window(img, na.rm=TRUE)
}
if (cal.min(img) == cal.max(img)){
img[1] = cal.min(img) - 1
img = cal_img(img)
}
yind = 50:(512-20)
xind = 80:(512-100)
xx = img[,, z = 17][xind, yind]
X = nrow(xx)
Y = ncol(xx)
png(filename = pngname, res=600, height=7, width=7, units= "in")
par( oma = rep(0, 4), mar = c(0, 1, 2, 1), bg = "black", xpd=TRUE)
image(1:X, 1:Y, xx,
# image(ximg[,, z = 17][xind, yind],
col=gray(0:64/64),
bg = "black")
dev.off()
}
print(iimg)
pngname
?citep
