}
est <- "sd"
digit <- 1
data <- alldat
maketwo <- c("Age", "Enrollment_GCS_Add", "ICHVolume", "IVHVolume", "Prognostic_Score", "Hemphill", "Tuhrim")
for (icol in maketwo) {
nname <- paste0(icol, "2")
alldat[, nname] <- alldat[, icol]
rando[, nname] <- rando[, icol]
}
for (idat in c("rando", "alldat")){
#   eval(parse(text=paste("data <- ", idat)))
data = get(idat)
group <- "group"
tab <- NULL
tab <- rbind(tab, run_contin(data, vari="Age", est2=est, digit=digit, na.rm=FALSE))
tab <- rbind(tab, run_contin(data, vari="Age2", est1="median", est2="iqr", digit=digit, na.rm=FALSE, pvalue=FALSE))
#   tab <- rbind(tab, run_cat(data, vari="Age_Cat"))
tab <- rbind(tab, run_cat(data, vari="Gender", level="Male", yesno=TRUE))
#   tab <- rbind(tab, run_cat(data, vari="Ethnicity"))
tab <- rbind(tab, run_cat(data, vari="Race"))
tab <- rbind(tab, run_contin(data, vari="Enrollment_GCS_Add", est2=est, digit=digit, na.rm=FALSE))
tab <- rbind(tab, run_cat(data, vari="GCS_Cat"))
tab <- rbind(tab, run_contin(data, vari="Enrollment_NIHSS_Total", est2=est, digit=digit, na.rm=FALSE))
tab <- rbind(tab, run_contin(data, vari="systolic"))
tab <- rbind(tab, run_contin(data, vari="diastolic"))
tab <- rbind(tab, run_cat(data, vari="Diabetes", level="Yes", yesno=TRUE))
tab <- rbind(tab, run_cat(data, vari="Hypertension", level="Yes", yesno=TRUE))
tab <- rbind(tab, run_cat(data, vari="Other_CV", level="Abnormal", yesno=TRUE))
tab <- rbind(tab, run_cat(data, vari="ETOH_Abuse", level="Yes", yesno=TRUE))
tab <- rbind(tab, run_contin(data, vari="ICHVolume", est2=est, digit=digit, na.rm=FALSE))
tab <- rbind(tab, run_contin(data, vari="ICHVolume2", est1="median", est2="iqr", digit=digit, na.rm=FALSE, pvalue=FALSE))
#   tab <- rbind(tab, run_cat(data, vari="Haematoma_volume"))
tab <- rbind(tab, run_contin(data, vari="IVHVolume", est2=est, digit=digit, na.rm=FALSE))
tab <- rbind(tab, run_contin(data, vari="IVHVolume2", est1="median", est2="iqr", digit=digit, na.rm=FALSE, pvalue=FALSE))
#   tab <- rbind(tab, run_cat(data, vari="Clot_Location_RC"))
tab <- rbind(tab, run_cat(data, vari="Lobar_BG_vs"))
tab <- rbind(tab, run_contin(data, vari="Ictus_to_Enrolled"))
tab <- rbind(tab, run_contin(data, vari="Randomization_to_Op_Procedure", na.rm=TRUE))
tab <- rbind(tab, run_cat(data, vari="Surgery_Time"))
tab <- rbind(tab, run_contin(data, vari="Tuhrim"))
tab <- rbind(tab, run_contin(data, vari="Prognostic_Score"))
tab <- rbind(tab, run_contin(data, vari="Prognostic_Score2", est1="median", est2="iqr", digit=digit))
tab <- rbind(tab, run_contin(data, vari="Hemphill"))
tab <- rbind(tab, run_cat(data, vari="Hemphill_Score"))
# tab <- rbind(tab, run_contin(data, vari="Ictus_to_Op_Procedure", est, digit))
tab[tab == "0 (NaN%)"] <- "NA"
tab[tab == "NA (NA)"] <- "NA"
rn <- rownames(tab)
tab[rn %in% c("<= 36 Hours", "> 36 Hours"), "Medical"] <- NA
rn[rn == "Clot_Location_RC"] <- "Clot Location"
rn[rn == "GCS_Cat"] <- "Enrollment GCS"
rn[rn == "Age_Cat"] <- "Age in Years"
rn[rn == "Haematoma_volume"] <- "ICH Volume (cc)"
rn[rn == "Lobar_BG_vs"] <- "Clot Site"
is.var <- apply(tab, 1, function(x) all(x %in% c("", NA)))
rn[!is.var] <- paste0("ZZZ", rn[!is.var])
rn[rn == "ZZZAge2"] <- "Age in Years: Median (IQR)"
rn[rn == "ZZZAge"] <- "Age in Years: Mean (SD)"
rn[rn == "ZZZEnrollment_GCS_Add"] <- "Enrollment GCS: Mean (SD)"
rn[rn == "ZZZICHVolume"] <- "ICH Volume (cc): Mean (SD)"
rn[rn == "ZZZICHVolume2"] <- "ICH Volume (cc): Median (IQR)"
rn[rn == "ZZZIVHVolume"] <- "IVH Volume (cc): Mean (SD)"
rn[rn == "ZZZIVHVolume2"] <- "IVH Volume (cc): Median (IQR)"
rn[rn == "ZZZPrognostic_Score"] <- "Prognostic Score: Mean (SD)"
rn[rn == "ZZZEnrollment_NIHSS_Total"] <- "Enrollment NIHSS: Mean (SD)"
rn[rn == "ZZZPrognostic_Score2"] <- "Prognostic Score: Median (IQR)"
rn[rn == "ZZZSurgery_Time"] <- "Ictus to Surgery"
rn[rn == "ZZZsystolic"] <- "Systolic BP (mmHg): Mean (SD)"
rn[rn == "ZZZdiastolic"] <- "Diastolic BP (mmHg): Mean (SD)"
rn[rn == "ZZZRandomization_to_Op_Procedure"] <- "Randomization to Surgery (Hours)"
rn[rn == "ZZZTuhrim"] <- "Tuhrim Score"
rn[rn == "ZZZHemphill"] <- "Hemphill Score: Mean (SD)"
rn[rn == "ZZZIctus_to_Enrolled"] <- "Ictus to Randomization (Days)"
rn[rn == "ZZZAny_IVH"] <- "Any IVH Present at Randomization"
rn[rn == "ZZZDiabetes"] <- "Diabetes"
rn[rn == "ZZZHypertension"] <- "History of Hypertension"
rn[rn == "ZZZOther_CV"] <- "Other Cardiovascular Disease"
rn[rn == "ZZZETOH_Abuse"] <- "Alcohol Abuse"
rn[rn == "ZZZGender"] <- "Gender: Male"
rn <- gsub("_", " ", rn)
rownames(tab) <- rn
tt <- table(data[, group])
if (runall){
tt = c(tt, All = sum(tt))
}
tab <- data.frame(tab, stringsAsFactors=FALSE)
tab$Medical <- gsub("NaN (NA)", NA, tab$Medical, fixed=TRUE)
colnames(tab) <- paste0(names(tt), " (N=",tt, ")")
eval(parse(text=paste0("tab.", idat, " <- tab")))
}
for (icol in maketwo) {
nname <- paste0(icol, "2")
alldat[, nname] <- NULL
rando[, nname] <- NULL
}
groups <- c("all randomized", "all")
caps <- paste0("Demographic and protocol information, medical history, and clot characteristics for ", groups, " by group assigned")
figcap.demog <- paste0("Demographic and protocol information, medical history, and clot characteristics for randomized Medical and MIS groups, and randomized MIS + run-in MIS patients.  Prognostic score was calculated by the following equation: GCS*10 - Age - 0.64 * ICH Volume \\citep{mendelow}.  Also, including the MIS run-in patients (N=27) did not change the distribution of characteristics largely compared to the randomized MIS group." )
addtorow <- list()
addtorow$pos <- list()
addtorow$pos[[1]] <- 0
addtorow$command <- c("\\hline & \\multicolumn{2}{c}{N\\% or Mean(SD)} \\\\ ")
xtab.rando <- xtable(tab.rando, align=ifelse(runall, "lcccc", "lccc"))
tab.rando
library(knitr)
opts_chunk$set(echo=FALSE, prompt=FALSE, message=FALSE, warning=FALSE, comment="", results='hide')
setwd("~/CT_Registration/RIP_SlideDeck/")
df
source('~/.active-rstudio-document', echo=TRUE)
library(pander)
?pander
library(paner)
library(pander)
pander(tb1)
tb1 = CreateTableOne(vars = vars, factorVars = catvars,
data = demog)
class(tb1)
as.matrix(tb1)
matrix(tb1)
as.data.frame(tb1)
data.frame(tb1)
?CreateTableOne
z = print(tb1)
z
library(tableone)
library(stargazer)
library(pander)
n.ids = length(unique(fdf$id))
demog = as.numeric(gsub("-", "", fdf$id))
demog = all.alldat[ all.alldat$patientName %in% demog, ]
stopifnot(nrow(demog) == n.ids)
demog$Diagnostic_ICH_Volume =demog$ICH_Dx_10 * 10
demog$Diagnostic_IVH_Volume =demog$IVH_Dx_10 * 10
vars = c("Diagnostic_ICH_Volume", "Diagnostic_IVH_Volume",
"Age", "Gender", "Race")
catvars = c("Gender", "Race")
tb1 = CreateTableOne(vars = vars, factorVars = catvars,
data = demog)
tb1 = print(tb1)
pander(tb1)
?pander(tb1)
tb1
pander(tb1)
?pander(tb1)
pander
class(tb1)
showMethods("pander", x)
showMethods("pander", "matrix")
showMethod("pander", "matrix")
findMethod("pander", "matrix")
findMethods("pander", "matrix")
findMethods("pander", signature="matrix")
findMethod("pander", signature="matrix")
?showMethods
findMethod("pander", classes="matrix")
showMethods("pander", classes="matrix")
?findMethod
findMethod("pander", "matrix")
pander:::pander.matrix
?pandoc.table
pandoc.table(mtcars, 'Motor Trend Car Road Tests')
x <- data.frame(a="Pandoc\nPackage")
pandoc.table(x)
pandoc.table(x, keep.line.breaks = TRUE)
pander(tb1)
?pander
pander.return()
pander(tb1)
pander.return()
pander.return
x = pander.return(tb1)
x
library(tableone)
library(stargazer)
library(pander)
n.ids = length(unique(fdf$id))
demog = as.numeric(gsub("-", "", fdf$id))
demog = all.alldat[ all.alldat$patientName %in% demog, ]
stopifnot(nrow(demog) == n.ids)
demog$Diagnostic_ICH_Volume =demog$ICH_Dx_10 * 10
demog$Diagnostic_IVH_Volume =demog$IVH_Dx_10 * 10
vars = c("Diagnostic_ICH_Volume", "Diagnostic_IVH_Volume",
"Age", "Gender", "Race")
catvars = c("Gender", "Race")
tb1 = CreateTableOne(vars = vars, factorVars = catvars,
data = demog)
tb1 = pander.return(tb1)
tb1 = tb1[ tb1 != ""]
library(tableone)
library(stargazer)
library(pander)
n.ids = length(unique(fdf$id))
demog = as.numeric(gsub("-", "", fdf$id))
demog = all.alldat[ all.alldat$patientName %in% demog, ]
stopifnot(nrow(demog) == n.ids)
demog$Diagnostic_ICH_Volume =demog$ICH_Dx_10 * 10
demog$Diagnostic_IVH_Volume =demog$IVH_Dx_10 * 10
vars = c("Diagnostic_ICH_Volume", "Diagnostic_IVH_Volume",
"Age", "Gender", "Race")
catvars = c("Gender", "Race")
tb1 = CreateTableOne(vars = vars, factorVars = catvars,
data = demog)
library(tableone)
library(stargazer)
library(pander)
n.ids = length(unique(fdf$id))
demog = as.numeric(gsub("-", "", fdf$id))
demog = all.alldat[ all.alldat$patientName %in% demog, ]
stopifnot(nrow(demog) == n.ids)
demog$Diagnostic_ICH_Volume =demog$ICH_Dx_10 * 10
demog$Diagnostic_IVH_Volume =demog$IVH_Dx_10 * 10
vars = c("Diagnostic_ICH_Volume", "Diagnostic_IVH_Volume",
"Age", "Gender", "Race")
catvars = c("Gender", "Race")
tb1 = CreateTableOne(vars = vars, factorVars = catvars,
data = demog)
tb1 = print(tb1)
tb1 = pander.return(tb1)
tb1 = tb1[ tb1 != ""]
tb1
cat(tb1)
cat(tb1, sep="\n")
library(tableone)
library(stargazer)
library(pander)
n.ids = length(unique(fdf$id))
demog = as.numeric(gsub("-", "", fdf$id))
demog = all.alldat[ all.alldat$patientName %in% demog, ]
stopifnot(nrow(demog) == n.ids)
demog$Diagnostic_ICH_Volume =demog$ICH_Dx_10 * 10
demog$Diagnostic_IVH_Volume =demog$IVH_Dx_10 * 10
vars = c("Diagnostic_ICH_Volume", "Diagnostic_IVH_Volume",
"Age", "Gender", "Race")
catvars = c("Gender", "Race")
tb1 = CreateTableOne(vars = vars, factorVars = catvars,
data = demog)
tb1 = print(tb1)
tb1 = pander.return(tb1)
tb1 = tb1[ tb1 != ""]
print(tb1)
cat(tb1)
cat(tb1, sep="\n")
pander
pander(tb1)
?pandoc.table
m <- data.frame(a = c(1, -500, 10320, 23, 77),
b = runif(5),
c = c('a', 'bb', 'ccc', 'dddd', 'eeeee'))
pandoc.table(m)
pandoc.table(m, justify = c('right', 'left', 'centre'))
pandoc.table(m)
pandoc.table(m, style = "grid")
pandoc.table(m, style = "simple")
pandoc.table(t, style = "grid")
tb1
?pandoc.table
pandoc.table(tb1)
pandoc.table(tb1, style="sipmle")
pandoc.table(tb1, style="simple")
tb1
pandoc.header(tb1, style="simple")
?pandoc.verbatim(tb1)
pandoc.verbatim(tb1)
library(tableone)
library(stargazer)
library(pander)
n.ids = length(unique(fdf$id))
demog = as.numeric(gsub("-", "", fdf$id))
demog = all.alldat[ all.alldat$patientName %in% demog, ]
stopifnot(nrow(demog) == n.ids)
demog$Diagnostic_ICH_Volume =demog$ICH_Dx_10 * 10
demog$Diagnostic_IVH_Volume =demog$IVH_Dx_10 * 10
vars = c("Diagnostic_ICH_Volume", "Diagnostic_IVH_Volume",
"Age", "Gender", "Race")
catvars = c("Gender", "Race")
tb1 = CreateTableOne(vars = vars, factorVars = catvars,
data = demog)
tb1 = print(tb1)
tb1
pandoc.table(tb1)
pandoc.table(tb1, style="simple")
tb1
pandoc.table(tb1, style="rmarkdown")
x = pandoc.table(tb1, style="rmarkdown")
class(x)
x = pandoc.table.return(tb1, style="rmarkdown")
class(x)
x
cat(c)
cat(x)
x = pandoc.table.return(tb1, style="rmarkdown")
x
cat(x)
rm(list=ls())
library(fslr)
library(cttools)
library(scales)
homedir = path.expand("~/CT_Registration/Segmentation/")
datadir = file.path(homedir, "Seg_Figure")
resdir = file.path(homedir, "results")
rda = file.path(resdir, "Smooth_Model_Cutoffs.Rda")
load(rda)
cutoff = all.scuts["mod_agg"]
img = readNIfTI(file.path(datadir,
"161-413_20110710_1619_CT_2_HEAD_Head.nii.gz"),
reorient=FALSE)
ssimg = readNIfTI(file.path(datadir,
"161-413_20110710_1619_CT_2_HEAD_Head_SS_0.01.nii.gz"),
reorient=FALSE)
ssmask = readNIfTI(file.path(datadir,
"161-413_20110710_1619_CT_2_HEAD_Head_SS_0.01_Mask.nii.gz"),
reorient=FALSE)
roi = readNIfTI(file.path(datadir,
"161-413_20110710_1619_CT_2_HEAD_HeadROI.nii.gz"),
reorient=FALSE)
pred = readNIfTI(file.path(datadir,
"161-413_20110710_1619_CT_2_HEAD_Head_mod_agg.nii.gz"),
reorient=FALSE)
pred = pred > cutoff
# mask.overlay(img, pred, window=c(0, 100))
# mask.overlay(img, roi, window=c(0, 100))
d = array(0, dim=dim(pred))
d[pred == 1 & roi == 1] = 1
d[pred == 1 & roi == 0] = 2
d[pred == 0 & roi == 1] = 2
plevs = c("Correct Prediction", "Incorrect Prediction")
d = niftiarr(pred, d)
xyz = cog(roi, ceil = TRUE)
pngname = file.path(resdir, "SS_Image_PrePredict.png")
png(filename = pngname, res=600, height=7, width=7, units= "in")
ortho2(ssimg,
window=c(0, 100),
xyz=xyz
)
dev.off()
pngname = file.path(resdir, "SS_Image_PrePredict_ROI.png")
png(filename = pngname, res=600, height=7, width=7, units= "in")
mask.overlay(ssimg, roi,
window=c(0, 100),
xyz=xyz
)
dev.off()
pngname = file.path(resdir, "SS_Image_PrePredict_Auto.png")
png(filename = pngname, res=600, height=7, width=7, units= "in")
mask.overlay(ssimg, pred,
window=c(0, 100),
xyz=xyz
)
dev.off()
pngname = file.path(resdir, "Prediction_Figure.png")
png(filename = pngname, res=600, height=7, width=7, units= "in")
mask.overlay(ssimg, d, col.y = c("blue", "red"),
window=c(0, 100),
ybreaks = c(0.5, 1.5, 2.5),
addlegend = TRUE,
leg.x = 5, leg.y= 60,
leg.col = c("blue", "red"),
leg.cex=3,
leg.title = "Prediction of ICH",
legend=plevs,
xyz=xyz
)
dev.off()
pngname = file.path(resdir, "Manual_Figure_Slice.png")
ximg = window_img(img, window=c(0, 100), replace = "missing")
iimg = ximg
iimg[roi == 1] = 101
X = nrow(iimg)
Y = ncol(iimg)
png(filename = pngname, res=600, height=7, width=7, units= "in")
par( oma = rep(0, 4), mar = c(1, 1, 2, 1), bg = "black")
image(iimg[,, z = 17],
col=c(gray(0:63/64), "red", 'red'),
bg = "black")
text(0.5, .95, label="Manual Segmentation", col="white", cex=2)
dev.off()
pngname = file.path(resdir, "Prediction_Figure_Slice.png")
png(filename = pngname, res=600, height=7, width=7, units= "in")
par( oma = rep(0, 4), mar = c(1, 1, 2, 1), bg = "black")
iimg = ximg
iimg[pred == 1] = 101
image(iimg[,, z = 17],
col=c(gray(0:63/64), "red", 'red'),
bg = "black")
text(0.5, .95, label="Automatic Segmentation", col="white", cex=2)
dev.off()
pngname = file.path(resdir, "SS_Figure.png")
png(filename = pngname, res=600, height=7, width=7, units= "in")
mask.overlay(img, ssmask, col.y = alpha("red", 0.5),
window=c(0, 100),
text = "Brain Extraction")
dev.off()
pngname = file.path(resdir, "Prediction_Figure.png")
png(filename = pngname, res=600, height=7, width=7, units= "in")
mask.overlay(ssimg, d, col.y = c("blue", "red"),
window=c(0, 100),
ybreaks = c(0.5, 1.5, 2.5),
addlegend = TRUE,
leg.x = 5, leg.y= 60,
leg.col = c("blue", "red"),
leg.cex=2.25,
leg.title = "Prediction of ICH",
legend=plevs,
xyz=xyz
)
dev.off()
pngname = file.path(resdir, "Prediction_Figure.png")
png(filename = pngname, res=600, height=7, width=7, units= "in")
mask.overlay(ssimg, d, col.y = c("blue", "red"),
window=c(0, 100),
ybreaks = c(0.5, 1.5, 2.5),
addlegend = TRUE,
leg.x = 2, leg.y= 60,
leg.col = c("blue", "red"),
leg.cex=2.3,
leg.title = "Prediction of ICH",
legend=plevs,
xyz=xyz
)
dev.off()
resdir
pngname = file.path(resdir, "SS_Image_PrePredict_Auto.png")
png(filename = pngname, res=600, height=7, width=7, units= "in")
mask.overlay(ssimg, pred,
window=c(0, 100),
xyz=xyz,
text = "Automatic\n Segmentation",
text.cex = 2.3
)
dev.off()
source('~/Dropbox/CTR/DHanley/CT_Registration/Segmentation/Seg_Figure/Seg_Figure.R')
tb1
source('~/.active-rstudio-document', echo=TRUE)
tb1
rownames(tb1)
x = pandoc.table.return(tb1, style="rmarkdown")
cat(x)
x
pandoc.table(tb1, style="rmarkdown")
head(tb1)
library(tableone)
library(stargazer)
library(pander)
n.ids = length(unique(fdf$id))
demog = as.numeric(gsub("-", "", fdf$id))
demog = all.alldat[ all.alldat$patientName %in% demog, ]
stopifnot(nrow(demog) == n.ids)
demog$Diagnostic_ICH_Volume =demog$ICH_Dx_10 * 10
demog$Diagnostic_IVH_Volume =demog$IVH_Dx_10 * 10
vars = c("Age", "Gender", "Race",
"Diagnostic_ICH_Volume", "Diagnostic_IVH_Volume")
catvars = c("Gender", "Race")
tb1 = CreateTableOne(vars = vars, factorVars = catvars,
data = demog)
tb1 = print(tb1)
rownames(tb1) = gsub("_", " ", rownames(tb1))
rownames(tb1) = gsub("mean", "Mean", rownames(tb1))
rownames(tb1) = gsub("(sd)", "(SD)", rownames(tb1), fixed=TRUE)
tb1 = tb1[rownames(tb1) != "n", , drop=FALSE]
tb1
colnames(tb1)
library(tableone)
library(stargazer)
library(pander)
n.ids = length(unique(fdf$id))
demog = as.numeric(gsub("-", "", fdf$id))
demog = all.alldat[ all.alldat$patientName %in% demog, ]
stopifnot(nrow(demog) == n.ids)
demog$Diagnostic_ICH_Volume =demog$ICH_Dx_10 * 10
demog$Diagnostic_IVH_Volume =demog$IVH_Dx_10 * 10
vars = c("Age", "Gender", "Race",
"Diagnostic_ICH_Volume", "Diagnostic_IVH_Volume")
catvars = c("Gender", "Race")
tb1 = CreateTableOne(vars = vars, factorVars = catvars,
data = demog)
tb1 = print(tb1)
rownames(tb1) = gsub("_", " ", rownames(tb1))
rownames(tb1) = gsub("mean", "Mean", rownames(tb1))
rownames(tb1) = gsub("(sd)", "(SD)", rownames(tb1), fixed=TRUE)
tb1 = tb1[rownames(tb1) != "n", , drop=FALSE]
# tb1 = pander.return(tb1)
# tb1 = tb1[ tb1 != ""]
x = pandoc.table.return(tb1, style="rmarkdown")
cat(x)
library(tableone)
library(stargazer)
library(pander)
n.ids = length(unique(fdf$id))
demog = as.numeric(gsub("-", "", fdf$id))
demog = all.alldat[ all.alldat$patientName %in% demog, ]
stopifnot(nrow(demog) == n.ids)
demog$Diagnostic_ICH_Volume =demog$ICH_Dx_10 * 10
demog$Diagnostic_IVH_Volume =demog$IVH_Dx_10 * 10
vars = c("Age", "Gender", "Race",
"Diagnostic_ICH_Volume", "Diagnostic_IVH_Volume")
catvars = c("Gender", "Race")
tb1 = CreateTableOne(vars = vars, factorVars = catvars,
data = demog)
tb1 = print(tb1)
rownames(tb1) = gsub("_", " ", rownames(tb1))
rownames(tb1) = gsub("mean", "Mean", rownames(tb1))
rownames(tb1) = gsub("(sd)", "(SD)", rownames(tb1), fixed=TRUE)
tb1 = tb1[rownames(tb1) != "n", , drop=FALSE]
tb1
cat(tb1, sep="\t")
tb1
x = pandoc.table.return(tb1, style="rmarkdown")
x
cat(x)
tb1
xtable(tb1)
